--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: game_zeroplayergame; Type: TABLE; Schema: public; Owner: ninopq; Tablespace: 
--

CREATE TABLE game_zeroplayergame (
    id integer NOT NULL,
    title character varying(500) NOT NULL,
    description text NOT NULL,
    created timestamp with time zone NOT NULL,
    category_id integer NOT NULL,
    owner_id integer NOT NULL,
    "scriptName" character varying(500),
    "scriptType" character varying(100),
    source text NOT NULL,
    "seedStructure" text NOT NULL
);


ALTER TABLE public.game_zeroplayergame OWNER TO ninopq;

--
-- Name: game_plerpingapp_id_seq; Type: SEQUENCE; Schema: public; Owner: ninopq
--

CREATE SEQUENCE game_plerpingapp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.game_plerpingapp_id_seq OWNER TO ninopq;

--
-- Name: game_plerpingapp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ninopq
--

ALTER SEQUENCE game_plerpingapp_id_seq OWNED BY game_zeroplayergame.id;


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: ninopq
--

ALTER TABLE ONLY game_zeroplayergame ALTER COLUMN id SET DEFAULT nextval('game_plerpingapp_id_seq'::regclass);


--
-- Name: game_plerpingapp_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ninopq
--

SELECT pg_catalog.setval('game_plerpingapp_id_seq', 5, true);


--
-- Data for Name: game_zeroplayergame; Type: TABLE DATA; Schema: public; Owner: ninopq
--

COPY game_zeroplayergame (id, title, description, created, category_id, owner_id, "scriptName", "scriptType", source, "seedStructure") FROM stdin;
5	Function in 1 variable with time parameter	Sets of graphs of a function in 1 variable with time as a parameter.  (Technically a function in 2 variables)	2016-02-02 19:11:30.899129-08	2	1	function-1-var-1-param.js	text/paperscript	/*\n    *\n    *   @author: nino p cocchiarella\n    *   (c) 2016\n    *\n*/\n\nview.viewSize = new Size(Canvas.width, Canvas.height);\n\n// define formal mathematical function in 1 var\nMFunction = function(func, extrema) {\n   \n    this.func = func;\n    if (!extrema) { extrema = [-5,5]; }\n\n    this.domain = {\n        elements: [],\n        min: (extrema[0] || -5),\n        max: (extrema[1] || 5)\n    };\n\n    this.codomain = {\n        elements: [],\n        min: null,\n        max: null\n    };\n\n    this.mapping = null;\n    this.compute();\n}\n\nMFunction.prototype = {\n    \n    compute: function(delta) {\n        if (!delta) { delta = 100; }\n\n        eval("_func = function(x) { return "+this.func+"; };");\n\n        this.domain.elements = numeric.linspace(this.domain.min, this.domain.max, delta);\n        this.codomain.elements = _.map(this.domain.elements, _func);\n        this.codomain.min = _.min(this.codomain.elements);\n        this.codomain.max = _.max(this.codomain.elements);\n        this.mapping = _.zip(this.domain.elements, this.codomain.elements);\n    },\n\n    draw: function(path, matrix_premult) {\n        if (this.mapping == null) { this.compute(); }\n        \n        _w = Math.abs(this.domain.max - this.domain.min);\n        _h = _.max(  [Math.abs(this.codomain.max),  Math.abs(this.codomain.min)]  );\n    \n\n        points = this.mapping;\n\n        if (matrix_premult) {\n            points = _.map(points, function(p) {\n                return numeric.dot(matrix_premult, p);\n            })\n        }\n\n        _.each(points, function(p) {\n            path.add(new Point(p));\n        });\n        \n        T = new Matrix(\n            (view.size.width / _w), 0,\n            0, (view.size.height / (-1*_h)), \n            view.center.x, view.center.y);\n\n        project.activeLayer.transform(T); \n    }\n}\n\n\nfunc = new MFunction(funct, [xMin,xMax]);\n\n// draw Cartesian axes\ndrawAxes = function(xmax, ymax) {\n\n    if (xmax == undefined) xmax = 10;\n    if (ymax == undefined) ymax = 10;\n\n    DARK_GREY = new Color(0.3, 0.3, 0.3, 0.8);\n    LIGHT_GREY = new Color(0.9, 0.9, 0.9, 0.2);\n\n    x_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\n    x_axis.add(new Point(-view.size.width/2, 0));\n    x_axis.add(new Point(view.size.width/2, 0));\n\n    y_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\n    y_axis.add(new Point(0, -view.size.height/2));\n    y_axis.add(new Point(0, view.size.height/2));\n\n    _.each(_.range(-1*xmax,xmax), function(n) {\n        var line = new Path({strokeColor: LIGHT_GREY });\n        line.add( new Point(n, view.size.height/2) );\n        line.add( new Point(n, -view.size.height/2) );\n        line.closed = true;\n    });\n\n\n    _.each(_.range(-1*ymax,ymax), function(n) {\n        var line = new Path({strokeColor: LIGHT_GREY });\n        line.add( new Point(view.size.width/2, n) );\n        line.add( new Point(-view.size.width/2, n) );\n        line.closed = true;\n    });\n\n\n    project.activeLayer.transform( new Matrix((view.size.width / xmax),0,0,(view.size.height / (-1*ymax)), view.center.x, view.center.y) );\n\n}\n//executeRemotePaperscript("/static/site/js/app/graph-util.js");\ndrawAxes();\n\n////////////////////////\n\nINITCOLOR = _.map(_.range(3), Math.random)\nN = 15;\n\n\ngraphs = [];\n\n_.map(_.range(N), function(n) {\n\n    layer = new Layer({\n        backgroundColor: new Color(1,1,1,0)\n    });\n\n    thickness = (n == 0 ? 3 : 1)\n    alpha = 0.5 - (n/(N*2))\n\n    var graph = new Path({\n        strokeColor: new Color(  INITCOLOR.concat([alpha]) ),\n        strokeWidth: thickness\n    });\n\n    matrix = [[1,0],[0,(1-(n/N))]]\n    func.draw(graph, matrix);\n    graph.smooth();\n    graphs.push(graph);\n\n });\n\n\n\n\n////////////\n\n\nfunction onResize(event) {\n\n}\n\nview.onFrame = function(event) {\n    scale = 1 + (Math.sin(event.time)/ breathDelta)\n    _.each(graphs, function(g) {\n        g.scale(1, scale);\n    });\n}	{\n    "breathDelta": {"default":17, "min":1.1, "max":1000},\n    "funct": {"default": "x*Math.cos(x)"},\n    "xMin": {"default": -5},\n    "xMax": {"default": 5}\n}
4	Multivariate Polynomial Landscape	Choose coefficients of high-degree a polynomial function in 2 variables, as well as the 3x3 matrix used to project the graph of the surface onto a 2-dimensional canvas.  Many intricate and beautiful scenes emerge with certain affine transformations.  Defaults to a "standard" parallel projection of the z-axis (the axis "coming out of the screen")	2016-02-02 21:50:13.820034-08	2	1	multivariate-polynomial-landscape.js	text/paperscript	DARK_GREY = new Color(0.3, 0.3, 0.3, 0.8);\nLIGHT_GREY = new Color(0.9, 0.9, 0.9, 0.2);\n\nview.viewSize = new Size(Canvas.width, Canvas.height);\n\nx_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\nx_axis.add(new Point(-view.size.width/2, 0));\nx_axis.add(new Point(view.size.width/2, 0));\nx_axis.closed = true;\n//project.activeLayer.insertChild(0,x_axis)\n\ny_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\ny_axis.add(new Point(0, -view.size.height/2));\ny_axis.add(new Point(0, view.size.height/2));\n\nx_lines = [];\n_.each(_.range(-10,10), function(n) {\n    line = new Path({strokeColor: LIGHT_GREY });\n    line.add( new Point(n, view.size.height/2) );\n    line.add( new Point(n, -view.size.height/2) );\n    line.closed = true;\n    //project.activeLayer.insertChild(0, line);\n    x_lines.push( line );\n});\n\ny_lines = [];\n_.each(_.range(-10,10), function(n) {\n    line = new Path({strokeColor: LIGHT_GREY });\n    line.add( new Point(view.size.width/2, n) );\n    line.add( new Point(-view.size.width/2, n) );\n    line.closed = true;\n    //project.activeLayer.insertChild(0, line);\n    y_lines.push( line );\n});\n\nfunction transformToCartesian(lay) {\n    lay.transform( new Matrix((view.size.width / 10),0,0,(view.size.height / -10), view.center.x, view.center.y) );\n}\n\ntransformToCartesian(project.activeLayer);\n\n\n// define formal mathematical function\nFunction = function(func, extrema) {\n    //echo(func.length);\n    this.func = func;\n    if (!extrema) { extrema = [-5,5]; }\n\n    this.domain = {\n        elements: [],\n        min: (extrema[0] || -5),\n        max: (extrema[1] || 5)\n    };\n\n    this.codomain = {\n        elements: [],\n        min: null,\n        max: null\n    };\n\n    this.mapping = null;\n}\n\nFunction.prototype = {\n    \n    compute: function(delta) {\n        if (!delta) { delta = 50; }\n        this.domain.elements = numeric.linspace(this.domain.min, this.domain.max, delta);\n        this.codomain.elements = _.map(this.domain.elements, this.func);\n        this.codomain.min = _.min(this.codomain.elements);\n        this.codomain.max = _.max(this.codomain.elements);\n        this.mapping = _.zip(this.domain.elements, this.codomain.elements);\n\n        this._w = Math.abs(this.domain.max - this.domain.min);\n        this._h = _.max(  [Math.abs(this.codomain.max),  Math.abs(this.codomain.min)]  );\n\n        this.transformation_matrix = new Matrix(\n            (view.size.width / this._w), 0,\n            0, (view.size.height / (-1*this._h)), \n            view.center.x, view.center.y);\n\n        this.computed = true;\n        echo("computed")\n    },\n\n    // "flattens" mapping\n    // i.e. [[1,2],3] -> [1,2,3]\n    getPoints: function() {\n        if (!this.computed) { this.compute(); }\n        this.points = _.map(this.mapping, function(pair) {\n            return _.flatten(pair);\n        });\n        return this.points;\n    },\n\n\n    draw: function(path, matrix_premult, map3d, tmatrix) {\n\n        if (!this.computed) { this.compute(); }\n\n        if (map3d) {\n            this.points = this.points3d;\n        } else {\n            this.points = this.getPoints();\n        }\n\n        if (matrix_premult) {\n            this.points = _.map(this.points, function(p) {\n                return numeric.dot(matrix_premult, p);\n            })\n        }\n\n        _.each(this.points, function(p) {\n            path.add(new Point(p));\n        })\n\n        path.add(new Point(this.domain.max*2, Math.abs(this.codomain.min)*-5 + Math.abs(this.codomain.max)*-5));\n        path.add(new Point(this.domain.min*2, Math.abs(this.codomain.min)*-5 + Math.abs(this.codomain.max)*-5));\n        path.closed = true;\n\n        //path.transform(this.transformation_matrix);\n\n        //path.smooth();\n        \n        if (tmatrix) {\n            path.transform(tmatrix);\n        } else {\n            path.transform(this.transformation_matrix);\n        } \n    }\n}\n\n\nfunction CartesianProduct(A,B) {\n    prod = [];\n    _.each(A, function(a) {\n        _.each(B, function(b) {\n            prod.push([a,b]);\n        });\n    });\n    return prod;\n}\n\nBivariatePolynomialFunction = function(degree, vars, coeffs, roots) {\n\n\n    if (roots) {\n        // each set of roots must be <= degree in order\n        factorsSym = [];\n        _.each(roots[0], function(root) {\n            factorsSym.push("("+vars[0]+"-"+root.toString()+")")\n        });\n        _.each(roots[1], function(root) {\n            factorsSym.push("("+vars[1]+"-"+root.toString()+")")\n        });\n        latex = _.reduce(factorsSym, function(j,k) { return j.toString() + k.toString(); });\n\n        f = function(x,z) {\n            factors = [];\n            _.each(roots[0], function(root) {\n                factors.push( (x-root) );\n            });\n            _.each(roots[1], function(root) {\n                factors.push( (z-root) );\n            });\n            return _.reduce(factors, function(j,k) { return j*k; });\n        }\n        f.latex = "f("+vars[0]+", "+vars[1]+")=" +latex.split('--').join('+');\n        return f;\n\n    } else {\n\n        // num coeffs should be 1 less than degree-th triangular number\n        term_exps = _.filter(CartesianProduct(_.range(degree+1), _.range(degree+1)),\n            function(x) {\n                return (x[0] + x[1]) <= degree && (x[0] + x[1]) != 0;\n            });\n        \n        if (!coeffs) {\n            coeffs = _.map(_.range(term_exps.length), function(i) {\n                rand = (Math.random() * degree) - (degree/2);\n                if (Math.random() > .4) return 0;\n                return Math.round(rand*3);\n            });\n        }  \n        \n        terms_sym = _.map(term_exps, function(term, i) {\n            if (coeffs[i] == 0) return "";\n            if (coeffs[i] == 1) {\n                coeff = "";\n            } else if (coeffs[i] == -1) {\n                coeff = "-"\n            } else coeff = coeffs[i].toString();\n            return coeff + " "\n                + vars[0]+"^"+term[0].toString() + " "\n                + vars[1]+"^"+term[1].toString();\n        });\n        terms_sym = _.filter(terms_sym, function(x) { return x != ""; })\n        //echo(terms_sym.join(" + "));\n\n        f = function(x,z) {\n            terms = _.map(term_exps, function(term, i) {\n                return coeffs[i] * Math.pow(x, term[0]) * Math.pow(z, term[1]);\n                });\n            return _.reduce(terms, function(j,k) { return j+k; });\n        }\n        f.latex = terms_sym.join("+").split("+-").join("-").split("+").join(" + ");\n        f.latex = f.latex.split("^1").join("");\n        f.latex = "f("+vars[0]+", "+vars[1]+")=" + f.latex.split(/[a-z]\\^0/).join("");\n        return f;\n    }\n\n}\n\n\n\n// choose a polynomial\n//Polynomial = new BivariatePolynomialFunction(3, ['x','y'], [1,-1,0,0,0,0,-2,3,1]);\nPolynomial = new BivariatePolynomialFunction(5, ['x','y']);//, null, [[2,3,0,-7,0],[1,-2, -4, -13]]);\n\n\nslices = [];\nzrange = [-15,0];\nxrange = [-9, 9];\nzspace = numeric.linspace(zrange[0], zrange[1], 50);\n\nF0 = function(x) { return Polynomial(x,0); }\nslice0 = new Function(F0, [xrange[0],xrange[1]]);\nslice0.compute();\nglobal_matrix = slice0.transformation_matrix;\n\nCartesianMatrix = new Matrix(1,0,0,-1, view.center.x, view.center.y);\n\n// begin drawing process\nGraphLayer = new Layer({\n     blendMode: "multiply",\n});\n//GraphLayer.globalMatrix = CartesianMatrix;\n//GraphLayer.transform(CartesianMatrix);\n\necho("global matrix"); echo(global_matrix);\n\nfunction_shown = false;\nzindex=0\n\nview.onFrame = function(event) {\n\t\n    if (zindex < zspace.length) {\n        \n        //prevLayer = project.activeLayer;\n        l = new Layer({\n            //blendMode: "multiply"\n        });\n\n        z = zspace[zindex];\n        //echo(z)\n    \n\n        F = function(x) { return Polynomial(x,z); }\n        slice = new Function(F, [xrange[0],xrange[1]]);\n\n        points3d = slice.getPoints();\n        _.each(_.range(points3d.length), function(i) { points3d[i].push(z); });\n\n        slice.points3d = points3d\n\n        transformation = [\n            [1, 0, 0], //5*Math.cos(Math.PI/-4)],\n            [0, 1, 0] //5*Math.sin(Math.PI/-4)],\n        ];\n\n        path1 = new Path({\n            strokeColor: new Color(0.3, 0.3, 0.3, 0.5),\n            strokeWidth: 1,\n            closed: true,\n            fillColor: new Color(Math.random(),1,Math.random(),0.2),\n        });\n\n        slice.draw(path1, transformation, true, global_matrix);\n        //path.transform(CartesianMatrix)\n\n        // transformation2 = new Matrix(\n        //     1-(z/50), 0, 0, 1-(z/50), 0, 0 //5*Math.sin(Math.PI/-4)],\n        // );\n\n        transformation2 = new Matrix(\n            1, 0, 0, 1, 0, 0 //5*Math.sin(Math.PI/-4)],\n        );\n\n        //path1.transform(transformation2);\n        path1.scale(1-(z/50), 1-(z/50), view.center)\n        path1.translate(new Point(-10*z, 30*z))\n        \n        project.activeLayer.insertChild(0,path1);\n\n        slices.push({layer: project.activeLayer,\n            func: slice,\n            transformation: transformation,\n            path: path1});\n\n        //echo(path.position)\n        \n        if (zindex == zspace.length-1) { \n            //echo(slices);\n            //view.pause();\n        }\n        zindex++;\n\n        if (!function_shown) {\n            if (display = document.getElementById("function-katex")) {\n                //katex.render(Polynomial.latex, display);\n                tokens = Polynomial.latex.split(" ");\n                line_length = Math.ceil(tokens.length/2);\n                line2 = tokens.splice(-1*line_length).join(" ");\n                line1 = tokens.join(" ");\n                $("#function-katex").text(\n                    "$$" + line1 + "$$\\n$$\\\\space \\\\space \\\\space \\\\space " + line2 + "$$ \\n"\n                     + "$$\\\\left(\\\\begin{array}{rrr}\\n1 & 0 & \\\\frac{1}{2} \\\\, \\\\sqrt{2} \\\\\\\\\\n0 & 1 & \\\\frac{1}{2} \\\\, \\\\sqrt{2}\\\\\\\\\\n \\\\end{array}\\\\right)$$");\n                function_shown = true;\n            }\n        }\n    }\n    \n}\n\n\n\n////////////\n\n\nfunction onResize(event) {\n\n}	{\n  "x1": {"default": 5}\n}
2	3-dimensional "Wolfenstein" Maze Generator	Generates a unique random 3-dimensional maze each instance. Allows user to navigate through maze with old-fashioned "Wolfenstein"-style interface. Collision detection built in.	2016-02-04 00:16:14.056506-08	1	1	3d-maze-solver.js	text/javascript	/*\n\n        Maze Generator pseudo-code\n\n        1. Make the initial cell the current cell and mark it as visited\n        2. While there are unvisited cells\n            1. If the current cell has any neighbors which have not been visited\n                1. Choose randomly one of the unvisited neighbors\n                2. Push the chosen cell to the stack\n                3. Remove the wall between the current cell and the chosen cell\n                4. Make the chosen cell the current cell and mark it as visited\n            2. Otherwise\n                1. Pop a cell from the stack\n                2. Make it the current cell\n        */\n\n        // class Maze {\n\n        function Maze(dimension, x, y, cellSize) {\n            this.x = x;\n            this.y = y;\n            this.map = [];\n            this.visited = [];\n            this.stack = [];\n            this.cellSize = cellSize;\n            this.begin = [];\n            this.turnArounds = [];\n            this.currentPosition = [0, 0];\n            this.ballRadius = this.cellSize * 0.4;\n            this.wallsRendered = [];\n            this.grass;\n            this.sky;\n            this.collisionPadding = 20;\n            this.playerCurrentCell = [0, 0];\n            this.atWall = false;\n            this.directionUnlocked = 0;\n            this.approachQuadrant = 0;\n\n            for (var i=0; i<y; i++) {\n                this.map.push( [] );\n                this.visited.push( [] );\n                for (var j=0; j<x; j++) {\n                    this.map[i].push( [1,1,1,1] );\n                    this.visited[i].push( false );\n                }\n            }\n\n            this.generateMap();\n        }\n\n        Maze.prototype.unvisitedCellsExist = function() {\n            for (var i=0; i<this.y; i++) {\n                for (var j=0; j<this.x; j++) {\n                    if (this.visited[i][j]) return true;\n                }\n            }\n            return false;\n        };\n\n        Maze.prototype.chooseNeighbor = function(cx,cy) {\n            var neighbors = [];\n            var directions = [];\n            if (cx > 0 && !this.visited[cy][cx-1]) \n                { neighbors.push( [cx-1, cy] ); directions.push('W'); }\n            if (cx < this.x-1 && !this.visited[cy][cx+1]) \n                { neighbors.push( [cx+1, cy] ); directions.push('E'); }\n            if (cy < this.y-1 && !this.visited[cy+1][cx]) \n                { neighbors.push( [cx, cy+1] ); directions.push('S'); }\n            if (cy > 0 && !this.visited[cy-1][cx]) \n                { neighbors.push( [cx, cy-1] ); directions.push('N'); }\n            if (neighbors.length) {\n                r = Math.floor(Math.random()*neighbors.length);\n                return [ neighbors[r], directions[r] ];\n            } else return false;\n        };\n\n        Maze.prototype.removeWall = function(x1, y1, direction) { \n            switch (direction) {\n                case 'N':\n                    this.map[y1][x1][0] = 0;\n                    this.map[y1-1][x1][2] = 0;\n                break;\n                case 'E':\n                    this.map[y1][x1][1] = 0;\n                    this.map[y1][x1+1][3] = 0;\n                break;\n                case 'S':\n                    this.map[y1][x1][2] = 0;\n                    this.map[y1+1][x1][0] = 0;\n                break;\n                case 'W':\n                    this.map[y1][x1][3] = 0;\n                    this.map[y1][x1-1][1] = 0;\n                break;\n            }\n        };\n\n        Maze.prototype.generateMap = function() {\n            \n            // choose initial cell\n            var rx = Math.floor(Math.random()*this.x);\n            var ry = Math.floor(Math.random()*this.y);\n\n            this.begin = [rx, ry];\n\n            var cx = rx;\n            var cy = ry;\n            var nx;\n            var ny;\n\n            this.visited[cy][cx] = true;\n\n            var next;\n            var nextDirection;\n\n            // while there are still unvisited cells\n            while (this.unvisitedCellsExist()) {\n                if (this.chooseNeighbor(cx,cy)) {\n                    \n                    next = this.chooseNeighbor(cx,cy);\n                    \n                    nx = next[0][0];\n                    ny = next[0][1];\n                    \n                    nextDirection = next[1];\n                    this.stack.push( [nx, ny] );\n                    this.removeWall(cx, cy, nextDirection);\n                    this.visited[ny][nx] = true;\n\n                    cx = nx;\n                    cy = ny;\n                \n                } else if (this.stack.length) {\n\n                    next = this.stack.pop();\n                    cx = next[0];\n                    cy = next[1];\n                    this.turnArounds.push([cx, cy]);\n                  \n                } else break;\n            }\n\n            this.end = [cx, cy];\n            this.map[0][0][3] = 0;\n            this.map[this.y-1][this.x-1][1] = 0;\n\n        };\n\n        Maze.prototype.getClearRect = function(cx, cy) {\n            var fx = cx * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n            var fy = cy * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n            return [fx,fy];\n        };\n\n        Maze.prototype.getBallCoords = function(nx, ny) {\n            var bx = nx * this.cellSize + (this.cellSize/2);\n            var by = ny * this.cellSize + (this.cellSize/2);\n            return [bx,by];\n        };\n\n        Maze.prototype.clearBall = function() {\n            var cl = this.getClearRect(this.currentPosition[0], this.currentPosition[1]);\n            ctx.clearRect(cl[0], cl[1], this.ballRadius*2+2, this.ballRadius*2+2);\n        };\n\n        Maze.prototype.drawBall = function() {\n            var ballCoords = this.getBallCoords(this.currentPosition[0], this.currentPosition[1]);\n            ctx.beginPath();\n            ctx.arc(ballCoords[0], ballCoords[1], this.ballRadius, 0, 2*Math.PI, false);\n            ctx.fillStyle = 'green';\n            ctx.fill();\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#003300';\n            ctx.stroke();\n        };\n\n        Maze.prototype.move = function(d) {\n            var dx = d[0];\n            var dy = d[1];\n            this.clearBall();\n            this.currentPosition = [this.currentPosition[0]+dx, this.currentPosition[1]+dy];\n            this.drawBall();\n        };\n\n        Maze.prototype.wallIsRendered = function(mt, lt) {\n            for (var i=0; i<this.wallsRendered.length; i++) {\n                if (this.wallsRendered[i][0][0] == mt[0] &&\n                    this.wallsRendered[i][0][1] == mt[1] &&\n                    this.wallsRendered[i][1][0] == lt[0] &&\n                    this.wallsRendered[i][1][1] == lt[1]) {\n\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        Maze.prototype.getQuadrant = function(theta) {\n            if (theta <= (Math.PI/2)) return 1;\n            if (theta <= Math.PI) return 2;\n            if (theta <= (Math.PI*3)/2) return 3;\n            if (theta <= (Math.PI*2)) return 4;\n        }\n\n        Maze.prototype.getOppositeQuad = function(quad) {\n            if (quad == 1) return 3;\n            if (quad == 2) return 4;\n            if (quad == 3) return 1;\n            if (quad == 4) return 2;\n        }\n\n        Maze.prototype.isDirectionValid = function(direction) {\n            \n            var currentAngle = (((Math.PI*3)/2) - camera.rotation.y) % (2*Math.PI);\n            if (currentAngle < 0) currentAngle += (2*Math.PI);\n            var currentQuad = this.getQuadrant(currentAngle);\n\n            // if at a wall, handle wall vs. direction, then return false\n            if (this.atWall) {\n\n                switch (this.atWall) {\n                    case 'N':\n                        if ((currentQuad == 3 || currentQuad == 4) && direction == 1)\n                            return true;\n                        if ((currentQuad == 1 || currentQuad == 2) && direction == -1)\n                            return true;\n                        if (currentQuad == 1)\n                            camera.position.x += 10;\n                        if (currentQuad == 2)\n                            camera.position.x -= 10;\n                        return false;\n                    break;\n                    case 'E':\n                        if ((currentQuad == 2 || currentQuad == 3) && direction == 1)\n                            return true;\n                        if ((currentQuad == 1 || currentQuad == 4) && direction == -1)\n                            return true;\n                        if (currentQuad == 1)\n                            camera.position.z -= 10;\n                        if (currentQuad == 4)\n                            camera.position.z += 10;\n                        return false;\n                    break;\n                    case 'S':\n                        if ((currentQuad == 1 || currentQuad == 2) && direction == 1)\n                            return true;\n                        if ((currentQuad == 3 || currentQuad == 4) && direction == -1)\n                            return true;\n                        if (currentQuad == 3)\n                            camera.position.x -= 10;\n                        if (currentQuad == 4)\n                            camera.position.x += 10;\n                        return false;\n                    break;\n                    case 'W':\n                        if ((currentQuad == 1 || currentQuad == 4) && direction == 1)\n                            return true;\n                        if ((currentQuad == 2 || currentQuad == 3) && direction == -1)\n                            return true;\n                        if (currentQuad == 2)\n                            camera.position.z -= 10;\n                        if (currentQuad == 3)\n                            camera.position.z += 10;\n                        return false;\n                    break;\n                }\n\n                return false;\n\n            }\n\n            return true;\n\n        };\n\n        Maze.prototype.checkWallCollision = function() {\n            \n            // figure out which cell player is in\n            var playerX = Math.floor(camera.position.x / this.cellSize) + (this.x/2);\n            var playerZ = Math.floor(camera.position.z / this.cellSize) + (this.y/2);\n\n            // mark cell as current cell if not already\n            if (playerX != this.playerCurrentCell[0] || playerZ != this.playerCurrentCell[1]) {\n                this.playerCurrentCell = [playerX, playerZ];\n                console.log('entered cell ' + playerX + ', ' + playerZ);\n            }\n\n            // get walls in current cell\n            var walls = this.map[this.playerCurrentCell[1]][this.playerCurrentCell[0]];\n\n            // get global boundary coords\n            var bounds = [];\n            bounds.push((this.playerCurrentCell[1] * this.cellSize - \n                ((this.y*this.cellSize)/2)) + this.collisionPadding);\n            bounds.push((this.playerCurrentCell[0] * this.cellSize - \n                ((this.x*this.cellSize)/2)) + this.cellSize - this.collisionPadding);\n            bounds.push((this.playerCurrentCell[1] * this.cellSize - \n                ((this.y*this.cellSize)/2)) + this.cellSize - this.collisionPadding);\n            bounds.push((this.playerCurrentCell[0] * this.cellSize - \n                ((this.x*this.cellSize)/2)) + this.collisionPadding);\n\n            \n            // test each wall for collision\n            var whichWall = false;\n\n            if (walls[0] && camera.position.z <= bounds[0]) {\n                console.log('hit north wall');\n                whichWall = 'N';\n            }\n            if (walls[1] && camera.position.x >= bounds[1]) {\n                console.log('hit east wall');\n                whichWall = 'E';\n            }\n            if (walls[2] && camera.position.z >= bounds[2]) {\n                console.log('hit south wall');\n                whichWall = 'S';\n            }\n            if (walls[3] && camera.position.x <= bounds[3]) {\n                console.log('hit west wall');\n                whichWall = 'W';\n            }\n\n            this.atWall = whichWall;\n        };\n\n        Maze.prototype.render = function(ctx) {\n            \n            var cell;\n            var cx;\n            var cy;\n\n            var geometry, texture, mesh;\n\n            // draw grass\n            geometry = new THREE.BoxGeometry(this.x*this.cellSize, 10, this.y*this.cellSize);\n            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/grass.jpg');\n            texture.anisotropy = renderer.getMaxAnisotropy();\n            material = new THREE.MeshBasicMaterial( { map: texture } );\n            this.grass = new THREE.Mesh( geometry, material );\n            this.grass.position.set(0, -100, 0); \n            scene.add( this.grass );\n\n            // draw sky\n            var skyRadius;\n            if (this.y > this.x) {\n                skyRadius = (this.y*this.cellSize);\n            } else skyRadius = (this.x*this.cellSize); \n            \n            geometry = new THREE.SphereGeometry(skyRadius, 16, 16, Math.PI/2,  Math.PI*2, 0, Math.PI);\n            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/sky.jpg');\n            texture.anisotropy = renderer.getMaxAnisotropy();\n            material = new THREE.MeshBasicMaterial( {map: texture} );\n            material.side = THREE.BackSide\n            this.sky = new THREE.Mesh(geometry, material);\n            this.sky.position.set(0,0,0);\n            scene.add(this.sky);\n\n            for (var i=0; i<this.y; i++) {\n                for (var j=0; j<this.x; j++) {\n                    \n                    cell = this.map[i][j];\n                    cx = this.cellSize * j - ((this.x*this.cellSize)/2);\n                    cy = this.cellSize * i - ((this.y*this.cellSize)/2);\n                    var mt;\n                    var lt;\n\n                    if (cell[0]) {\n                        mt = [cx, cy];\n                        lt = [cx+this.cellSize, cy];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  200, 200, 10  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/wood.jpg');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0]+this.cellSize/2, 0, mt[1]); \n                            scene.add( mesh );\n                        }\n                    } \n                    if (cell[1]) {\n                        mt = [cx+this.cellSize, cy];\n                        lt = [cx+this.cellSize, cy+this.cellSize];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  10, 200, 200  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/wood.jpg');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0], 0, mt[1]+this.cellSize/2); \n                            scene.add( mesh );\n                        }\n                    } \n                    if (cell[2]) {\n                        mt = [cx+this.cellSize, cy+this.cellSize];\n                        lt = [cx, cy+this.cellSize];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  200, 200, 10  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/crate.gif');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0]-this.cellSize/2, 0, mt[1]); \n                            scene.add( mesh );\n                        }\n                    }\n                    if (cell[3]) {\n                        mt = [cx, cy+this.cellSize];\n                        lt = [cx, cy];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  10, 200, 200  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/crate.gif');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0], 0, mt[1]-this.cellSize/2); \n                            scene.add( mesh );\n                        }\n                    }\n\n                }\n            }\n        };\n\n        Maze.prototype.walkForward = function() {\n            this.checkWallCollision();\n            if (this.isDirectionValid(1)) {\n                camera.position.x -= 10 * Math.sin(camera.rotation.y);\n                camera.position.z += 10 * Math.cos(camera.rotation.y);\n                console.log('F');\n            }\n        };\n\n        Maze.prototype.walkBackwards = function() {\n            this.checkWallCollision();\n            if (this.isDirectionValid(-1)) {\n                camera.position.x += 10 * Math.sin(camera.rotation.y);\n                camera.position.z -= 10 * Math.cos(camera.rotation.y);\n                console.log('B');\n            }\n        };\n\n        Maze.prototype.turnLeft = function() {\n            camera.rotation.y -= Math.PI / 10;\n        };\n\n        Maze.prototype.turnRight = function() {\n            camera.rotation.y += Math.PI / 10;\n        };\n\n        Maze.prototype.flyUp = function() {\n            camera.position.y += 10;\n        };\n\n        Maze.prototype.flyDown = function() {\n            camera.position.y -= 10;\n        };\n\n        // } end class Maze\n\n        /*\n            MazeSolver pseudo-code\n\n            1. start at the entrance\n            2. while not at the exit\n                1. push the current cell to visited\n                2. if exists one or more directions that have not been visited\n                    1. push the current cell to pathStack\n                    2. choose any direction from those not visited\n                    3. move in that direction\n                    4. draw path from previous cell to chosen cell\n                    5. make the chosen cell the current cell\n                3. otherwise backtrack\n                    1. pop the pathStack\n                    2. remove line from currentCell to popped cell\n                    3. do not remove popped cell from visited\n        */\n\n        // class MazeSolver {\n\n        function MazeSolver(maze) {\n            this.Maze = maze;\n            this.position = [0, 0];\n            this.pathStack = [];\n            this.visited = [];\n            this.Maze.clearBall();\n\n            var self = this;\n            this.solveStep = function() {\n                self.moveForward();\n            };\n        }\n\n        MazeSolver.prototype.getValidDirections = function(x,y) {\n            \n            var directions = [];\n            \n            if (!this.Maze.map[y][x][0]) \n                directions.push([0,-1]);\n            if (!this.Maze.map[y][x][1] && (x!=this.Maze.x-1 || y!=this.Maze.y-1)) \n                directions.push([1,0]);\n            if (!this.Maze.map[y][x][2]) \n                directions.push([0,1]);\n            if (!this.Maze.map[y][x][3] && (x||y)) \n                directions.push([-1,0]);\n\n            var validDirections = [];\n            for (var i=0; i<directions.length; i++) {\n                var tx = x+directions[i][0];\n                var ty = y+directions[i][1];\n                if (!this.isVisited(tx,ty)) {\n                    validDirections.push(directions[i]);\n                }\n            }\n\n            return validDirections;\n        };\n\n        MazeSolver.prototype.isVisited = function(x,y) {\n            for (var i=0; i<this.visited.length; i++) {\n                if (this.visited[i][0] == x && this.visited[i][1] == y) \n                    return true;\n            }\n            return false;\n        };\n\n        MazeSolver.prototype.isDeadEnd = function(x,y) {\n            if (!this.getValidDirections(x,y).length)\n                return true;\n            return false;\n        };\n\n        MazeSolver.prototype.movePath = function(cx,cy,nx,ny) {\n            ctx.lineWidth = 4;\n            ctx.strokeStyle = '#5555ff';\n            ctx.beginPath();\n\n            ctx.moveTo(cx*this.Maze.cellSize+this.Maze.cellSize/2, \n                cy*this.Maze.cellSize+this.Maze.cellSize/2);\n            ctx.lineTo(nx*this.Maze.cellSize+this.Maze.cellSize/2, \n                ny*this.Maze.cellSize+this.Maze.cellSize/2);\n            ctx.stroke();\n        };\n\n        MazeSolver.prototype.clearPath = function(x,y) {\n            ctx.clearRect(x*this.Maze.cellSize+2, y*this.Maze.cellSize+2, \n                this.Maze.cellSize-4, this.Maze.cellSize-4);\n        };\n\n        MazeSolver.prototype.isFinished = function() {\n            if (this.position[0] == this.Maze.x-1 && this.position[1] == this.Maze.y-1)\n                return true;\n            return false;\n        };\n\n        MazeSolver.prototype.moveForward = function() {\n            \n            var cx = this.position[0];\n            var cy = this.position[1];\n            \n            this.visited.push([cx,cy]);\n            \n            if (this.isFinished()) {\n                console.log("FINISH");\n                clearInterval(this.interval);\n                return;\n            }\n\n            if (!this.isDeadEnd(cx,cy)) {\n                this.pathStack.push([cx,cy]);\n                var directions = this.getValidDirections(cx,cy);\n                var randomDirection = Math.floor(Math.random()*directions.length);\n                \n                var nx = cx + directions[randomDirection][0];\n                var ny = cy + directions[randomDirection][1];\n\n                this.movePath(cx,cy,nx,ny);\n                this.position = [nx,ny];\n\n            } else { \n                this.backtrack();\n            }\n        };\n\n        MazeSolver.prototype.backtrack = function() {\n            var lastCell = this.pathStack.pop();\n            this.clearPath(this.position[0], this.position[1]);\n            this.position = [lastCell[0], lastCell[1]];\n        };\n\n        // } end class MazeSolver\n\n\n        $(document).keydown(function(e) {\n            \n            var tx = Maze.currentPosition[0];\n            var ty = Maze.currentPosition[1];\n\n            switch (e.keyCode) {\n\n                case 37: // left\n                    Maze.turnLeft();\n                break;\n                case 38: // up (forward)\n                    Maze.walkForward();\n                break;\n                case 39: // right\n                    Maze.turnRight();\n                break;\n                case 40: // down (backwards)\n                    Maze.walkBackwards();\n                break;\n                case 65: // 'a' key\n                    Maze.flyUp();\n                break;\n                case 90: // 'z' key\n                    Maze.flyDown();\n                break;\n\n            }\n        });\n\n        function solveMaze() {\n            solver = new MazeSolver(Maze);\n            solver.interval = setInterval(solver.solveStep, 5);\n        }\n\n        var Maze;\n        \n\n        var ctx;\n        var solver;\n\n        var camera, scene, renderer;\n        var mesh;\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize( window.innerWidth, window.innerHeight );\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n}\n\n    \n    var cellSize = 200;\n\nrenderer = new THREE.WebGLRenderer({\n\tpreserveDrawingBuffer: true\n});\nrenderer.setSize( Canvas.width, Canvas.height );\necho(renderer.domElement); echo('-----');\ndocument.body.appendChild( renderer.domElement );\n\nwindow._renderer = renderer;\n\ncamera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 1, 10000 );\nscene = new THREE.Scene();\n\nMaze = new Maze(2, 16, 10, cellSize);\nMaze.render();\n\ncamera.position.x = Maze.cellSize * Maze.x * -0.5;\ncamera.position.y = 15;\ncamera.position.z = Maze.cellSize * Maze.y * -0.5 + Maze.cellSize/2;\n\ncamera.lookAt(scene.position);\nwindow.addEventListener( 'resize', onWindowResize, false );\nanimate();\n\n     \n\n        	{}
1	2-dimensional Maze Generator and Solver	Uses DFS algorithm to create a unique maze each instance of running. Arrow keys let user navigate through and try to solve the maze. Automatic solving -- solution button presents the one and only one correct path.	2016-02-04 00:49:36.389724-08	1	1	2d-maze-solver.js	text/javascript	/*\n\nMaze Generator pseudo-code\n\n1. Make the initial cell the current cell and mark it as visited\n2. While there are unvisited cells\n    1. If the current cell has any neighbors which have not been visited\n        1. Choose randomly one of the unvisited neighbors\n        2. Push the chosen cell to the stack\n        3. Remove the wall between the current cell and the chosen cell\n        4. Make the chosen cell the current cell and mark it as visited\n    2. Otherwise\n        1. Pop a cell from the stack\n        2. Make it the current cell\n*/\n\n// class Maze {\n\nfunction Maze(dimension, x, y, cellSize) {\n    this.x = x;\n    this.y = y;\n    this.map = [];\n    this.visited = [];\n    this.stack = [];\n    this.cellSize = cellSize;\n    this.begin = [];\n    this.turnArounds = [];\n    this.currentPosition = [0, 0];\n    this.ballRadius = this.cellSize * 0.4;\n    this.linesDrawn = [];\n\n    for (var i=0; i<y; i++) {\n        this.map.push( [] );\n        this.visited.push( [] );\n        for (var j=0; j<x; j++) {\n            this.map[i].push( [1,1,1,1] );\n            this.visited[i].push( false );\n        }\n    }\n\n    this.generateMap();\n}\n\nMaze.prototype.unvisitedCellsExist = function() {\n    for (var i=0; i<this.y; i++) {\n        for (var j=0; j<this.x; j++) {\n            if (this.visited[i][j]) return true;\n        }\n    }\n    return false;\n};\n\nMaze.prototype.chooseNeighbor = function(cx,cy) {\n    var neighbors = [];\n    var directions = [];\n    if (cx > 0 && !this.visited[cy][cx-1]) \n        { neighbors.push( [cx-1, cy] ); directions.push('W'); }\n    if (cx < this.x-1 && !this.visited[cy][cx+1]) \n        { neighbors.push( [cx+1, cy] ); directions.push('E'); }\n    if (cy < this.y-1 && !this.visited[cy+1][cx]) \n        { neighbors.push( [cx, cy+1] ); directions.push('S'); }\n    if (cy > 0 && !this.visited[cy-1][cx]) \n        { neighbors.push( [cx, cy-1] ); directions.push('N'); }\n    if (neighbors.length) {\n        r = Math.floor(Math.random()*neighbors.length);\n        return [ neighbors[r], directions[r] ];\n    } else return false;\n};\n\nMaze.prototype.removeWall = function(x1, y1, direction) { \n    switch (direction) {\n        case 'N':\n            this.map[y1][x1][0] = 0;\n            this.map[y1-1][x1][2] = 0;\n        break;\n        case 'E':\n            this.map[y1][x1][1] = 0;\n            this.map[y1][x1+1][3] = 0;\n        break;\n        case 'S':\n            this.map[y1][x1][2] = 0;\n            this.map[y1+1][x1][0] = 0;\n        break;\n        case 'W':\n            this.map[y1][x1][3] = 0;\n            this.map[y1][x1-1][1] = 0;\n        break;\n    }\n};\n\nMaze.prototype.generateMap = function() {\n    \n    // choose initial cell\n    var rx = Math.floor(Math.random()*this.x);\n    var ry = Math.floor(Math.random()*this.y);\n\n    this.begin = [rx, ry];\n\n    var cx = rx;\n    var cy = ry;\n    var nx;\n    var ny;\n\n    this.visited[cy][cx] = true;\n\n    var next;\n    var nextDirection;\n\n    // while there are still unvisited cells\n    while (this.unvisitedCellsExist()) {\n        if (this.chooseNeighbor(cx,cy)) {\n            \n            next = this.chooseNeighbor(cx,cy);\n            \n            nx = next[0][0];\n            ny = next[0][1];\n            \n            nextDirection = next[1];\n            this.stack.push( [nx, ny] );\n            this.removeWall(cx, cy, nextDirection);\n            this.visited[ny][nx] = true;\n\n            cx = nx;\n            cy = ny;\n        \n        } else if (this.stack.length) {\n\n            next = this.stack.pop();\n            cx = next[0];\n            cy = next[1];\n            this.turnArounds.push([cx, cy]);\n          \n        } else break;\n    }\n\n    this.end = [cx, cy];\n    this.map[0][0][3] = 0;\n    this.map[this.y-1][this.x-1][1] = 0;\n\n};\n\nMaze.prototype.getClearRect = function(cx, cy) {\n    var fx = cx * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n    var fy = cy * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n    return [fx,fy];\n};\n\nMaze.prototype.getBallCoords = function(nx, ny) {\n    var bx = nx * this.cellSize + (this.cellSize/2);\n    var by = ny * this.cellSize + (this.cellSize/2);\n    return [bx,by];\n};\n\nMaze.prototype.clearBall = function() {\n    var cl = this.getClearRect(this.currentPosition[0], this.currentPosition[1]);\n    ctx.clearRect(cl[0], cl[1], this.ballRadius*2+2, this.ballRadius*2+2);\n};\n\nMaze.prototype.drawBall = function() {\n    var ballCoords = this.getBallCoords(this.currentPosition[0], this.currentPosition[1]);\n    ctx.beginPath();\n    ctx.arc(ballCoords[0], ballCoords[1], this.ballRadius, 0, 2*Math.PI, false);\n    ctx.fillStyle = 'green';\n    ctx.fill();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#003300';\n    ctx.stroke();\n};\n\nMaze.prototype.move = function(d) {\n    var dx = d[0];\n    var dy = d[1];\n    this.clearBall();\n    this.currentPosition = [this.currentPosition[0]+dx, this.currentPosition[1]+dy];\n    this.drawBall();\n};\n\nMaze.prototype.lineIsDrawn = function(mt, lt) {\n    for (var i=0; i<this.linesDrawn.length; i++) {\n        if (this.linesDrawn[i][0][0] == mt[0] &&\n            this.linesDrawn[i][0][1] == mt[1] &&\n            this.linesDrawn[i][1][0] == lt[0] &&\n            this.linesDrawn[i][1][1] == lt[1]) {\n\n            return true;\n        }\n    }\n    return false;\n};\n\nMaze.prototype.render = function(ctx) {\n    \n    var cell;\n    var cx;\n    var cy;\n\n    ctx.moveTo(0,0);\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#666666';\n    \n    for (var i=0; i<this.y; i++) {\n        for (var j=0; j<this.x; j++) {\n            \n            ctx.beginPath();\n            cell = this.map[i][j];\n            cx = this.cellSize * j;\n            cy = this.cellSize * i;\n            var mt;\n            var lt;\n\n            if (cell[0]) {\n                mt = [cx, cy];\n                lt = [cx+this.cellSize, cy];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            } \n            if (cell[1]) {\n                mt = [cx+this.cellSize, cy];\n                lt = [cx+this.cellSize, cy+this.cellSize];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            } \n            if (cell[2]) {\n                mt = [cx+this.cellSize, cy+this.cellSize];\n                lt = [cx, cy+this.cellSize];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            }\n            if (cell[3]) {\n                mt = [cx, cy+this.cellSize];\n                lt = [cx, cy];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            }\n\n        }\n    }\n\n    this.move([0,0]);\n\n};\n\n// } end class Maze\n\n/*\n    MazeSolver pseudo-code\n\n    1. start at the entrance\n    2. while not at the exit\n        1. push the current cell to visited\n        2. if exists one or more directions that have not been visited\n            1. push the current cell to pathStack\n            2. choose any direction from those not visited\n            3. move in that direction\n            4. draw path from previous cell to chosen cell\n            5. make the chosen cell the current cell\n        3. otherwise backtrack\n            1. pop the pathStack\n            2. remove line from currentCell to popped cell\n            3. do not remove popped cell from visited\n*/\n\n// class MazeSolver {\n\nfunction MazeSolver(maze) {\n    this.Maze = maze;\n    this.position = [0, 0];\n    this.pathStack = [];\n    this.visited = [];\n    this.Maze.clearBall();\n\n    var self = this;\n    this.solveStep = function() {\n        self.moveForward();\n    };\n}\n\nMazeSolver.prototype.getValidDirections = function(x,y) {\n    \n    var directions = [];\n    \n    if (!this.Maze.map[y][x][0]) \n        directions.push([0,-1]);\n    if (!this.Maze.map[y][x][1] && (x!=this.Maze.x-1 || y!=this.Maze.y-1)) \n        directions.push([1,0]);\n    if (!this.Maze.map[y][x][2]) \n        directions.push([0,1]);\n    if (!this.Maze.map[y][x][3] && (x||y)) \n        directions.push([-1,0]);\n\n    var validDirections = [];\n    for (var i=0; i<directions.length; i++) {\n        var tx = x+directions[i][0];\n        var ty = y+directions[i][1];\n        if (!this.isVisited(tx,ty)) {\n            validDirections.push(directions[i]);\n        }\n    }\n\n    return validDirections;\n};\n\nMazeSolver.prototype.isVisited = function(x,y) {\n    for (var i=0; i<this.visited.length; i++) {\n        if (this.visited[i][0] == x && this.visited[i][1] == y) \n            return true;\n    }\n    return false;\n};\n\nMazeSolver.prototype.isDeadEnd = function(x,y) {\n    if (!this.getValidDirections(x,y).length)\n        return true;\n    return false;\n};\n\nMazeSolver.prototype.movePath = function(cx,cy,nx,ny) {\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = solutionPathColor;\n    ctx.beginPath();\n\n    ctx.moveTo(cx*this.Maze.cellSize+this.Maze.cellSize/2, \n        cy*this.Maze.cellSize+this.Maze.cellSize/2);\n    ctx.lineTo(nx*this.Maze.cellSize+this.Maze.cellSize/2, \n        ny*this.Maze.cellSize+this.Maze.cellSize/2);\n    ctx.stroke();\n};\n\nMazeSolver.prototype.clearPath = function(x,y) {\n    ctx.clearRect(x*this.Maze.cellSize+2, y*this.Maze.cellSize+2, \n        this.Maze.cellSize-4, this.Maze.cellSize-4);\n};\n\nMazeSolver.prototype.isFinished = function() {\n    if (this.position[0] == this.Maze.x-1 && this.position[1] == this.Maze.y-1)\n        return true;\n    return false;\n};\n\nMazeSolver.prototype.moveForward = function() {\n    \n    var cx = this.position[0];\n    var cy = this.position[1];\n    \n    this.visited.push([cx,cy]);\n    \n    if (this.isFinished()) {\n        console.log("FINISH");\n        clearInterval(this.interval);\n        return;\n    }\n\n    if (!this.isDeadEnd(cx,cy)) {\n        this.pathStack.push([cx,cy]);\n        var directions = this.getValidDirections(cx,cy);\n        var randomDirection = Math.floor(Math.random()*directions.length);\n        \n        var nx = cx + directions[randomDirection][0];\n        var ny = cy + directions[randomDirection][1];\n\n        this.movePath(cx,cy,nx,ny);\n        this.position = [nx,ny];\n\n    } else { \n        this.backtrack();\n    }\n};\n\nMazeSolver.prototype.backtrack = function() {\n    var lastCell = this.pathStack.pop();\n    this.clearPath(this.position[0], this.position[1]);\n    this.position = [lastCell[0], lastCell[1]];\n};\n\n// } end class MazeSolver\n\n\n\n\nfunction solveMaze() {\n    solver = new MazeSolver(Maze);\n    solver.interval = setInterval(solver.solveStep, 5);\n}\n\nvar Maze;\nvar ctx = Canvas.getContext("2d");\nvar solver;\n\nctx.fillStyle = '#ffffff'\nctx.fillRect(0,0,Canvas.width, Canvas.height)\n\n\n\nvar mx = Math.floor((Canvas.width) / cellSize);\nvar my = Math.floor((Canvas.height) / cellSize);\n\necho([Canvas.height, $(window).height(), mx, my]);\n\nMaze = new Maze(2, mx, my, cellSize);\nMaze.render(ctx);\n\n$(window).keydown(function(e) {\n            \n    var tx = Maze.currentPosition[0];\n    var ty = Maze.currentPosition[1];\n\n    switch (e.keyCode) {\n\n        case 37: // left\n            if (!Maze.map[ty][tx][3]) Maze.move([-1,0]);\n        break;\n        case 38: // up\n            if (!Maze.map[ty][tx][0]) Maze.move([0,-1]);\n        break;\n        case 39: // right\n            if (!Maze.map[ty][tx][1]) Maze.move([1,0]);\n        break;\n        case 40: // down\n            if (!Maze.map[ty][tx][2]) Maze.move([0,1]);\n        break;\n        case 83: // 's' key\n            solver = new MazeSolver(Maze);\n            solver.interval = setInterval(solver.solveStep, 5);\n        break;\n\n    }\n});	{\n    "cellSize": {"min": 5, "max": 150, "default": 30},\n    "solutionPathColor": {"default": "rgba(0,0,200,0.8)"}\n}
\.


--
-- Name: game_plerpingapp_pkey; Type: CONSTRAINT; Schema: public; Owner: ninopq; Tablespace: 
--

ALTER TABLE ONLY game_zeroplayergame
    ADD CONSTRAINT game_plerpingapp_pkey PRIMARY KEY (id);


--
-- Name: game_plerpingapp_5e7b1936; Type: INDEX; Schema: public; Owner: ninopq; Tablespace: 
--

CREATE INDEX game_plerpingapp_5e7b1936 ON game_zeroplayergame USING btree (owner_id);


--
-- Name: game_plerpingapp_b583a629; Type: INDEX; Schema: public; Owner: ninopq; Tablespace: 
--

CREATE INDEX game_plerpingapp_b583a629 ON game_zeroplayergame USING btree (category_id);


--
-- Name: game_plerpingapp_category_id_d18c203b_fk_game_category_id; Type: FK CONSTRAINT; Schema: public; Owner: ninopq
--

ALTER TABLE ONLY game_zeroplayergame
    ADD CONSTRAINT game_plerpingapp_category_id_d18c203b_fk_game_category_id FOREIGN KEY (category_id) REFERENCES game_category(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: game_plerpingapp_owner_id_db15314c_fk_authtools_user_id; Type: FK CONSTRAINT; Schema: public; Owner: ninopq
--

ALTER TABLE ONLY game_zeroplayergame
    ADD CONSTRAINT game_plerpingapp_owner_id_db15314c_fk_authtools_user_id FOREIGN KEY (owner_id) REFERENCES authtools_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

