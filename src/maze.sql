1	2-dimensional Maze Generator and Solver	Uses DFS algorithm to create a unique maze each instance of running. Arrow keys let user navigate through and try to solve the maze. Automatic solving -- solution button presents the one and only one correct path.	2016-02-04 00:49:36.389724-08	1	1	2d-maze-solver.js	text/javascript	/*\n\nMaze Generator pseudo-code\n\n1. Make the initial cell the current cell and mark it as visited\n2. While there are unvisited cells\n    1. If the current cell has any neighbors which have not been visited\n        1. Choose randomly one of the unvisited neighbors\n        2. Push the chosen cell to the stack\n        3. Remove the wall between the current cell and the chosen cell\n        4. Make the chosen cell the current cell and mark it as visited\n    2. Otherwise\n        1. Pop a cell from the stack\n        2. Make it the current cell\n*/\n\n// class Maze {\n\nfunction Maze(dimension, x, y, cellSize) {\n    this.x = x;\n    this.y = y;\n    this.map = [];\n    this.visited = [];\n    this.stack = [];\n    this.cellSize = cellSize;\n    this.begin = [];\n    this.turnArounds = [];\n    this.currentPosition = [0, 0];\n    this.ballRadius = this.cellSize * 0.4;\n    this.linesDrawn = [];\n\n    for (var i=0; i<y; i++) {\n        this.map.push( [] );\n        this.visited.push( [] );\n        for (var j=0; j<x; j++) {\n            this.map[i].push( [1,1,1,1] );\n            this.visited[i].push( false );\n        }\n    }\n\n    this.generateMap();\n}\n\nMaze.prototype.unvisitedCellsExist = function() {\n    for (var i=0; i<this.y; i++) {\n        for (var j=0; j<this.x; j++) {\n            if (this.visited[i][j]) return true;\n        }\n    }\n    return false;\n};\n\nMaze.prototype.chooseNeighbor = function(cx,cy) {\n    var neighbors = [];\n    var directions = [];\n    if (cx > 0 && !this.visited[cy][cx-1]) \n        { neighbors.push( [cx-1, cy] ); directions.push('W'); }\n    if (cx < this.x-1 && !this.visited[cy][cx+1]) \n        { neighbors.push( [cx+1, cy] ); directions.push('E'); }\n    if (cy < this.y-1 && !this.visited[cy+1][cx]) \n        { neighbors.push( [cx, cy+1] ); directions.push('S'); }\n    if (cy > 0 && !this.visited[cy-1][cx]) \n        { neighbors.push( [cx, cy-1] ); directions.push('N'); }\n    if (neighbors.length) {\n        r = Math.floor(Math.random()*neighbors.length);\n        return [ neighbors[r], directions[r] ];\n    } else return false;\n};\n\nMaze.prototype.removeWall = function(x1, y1, direction) { \n    switch (direction) {\n        case 'N':\n            this.map[y1][x1][0] = 0;\n            this.map[y1-1][x1][2] = 0;\n        break;\n        case 'E':\n            this.map[y1][x1][1] = 0;\n            this.map[y1][x1+1][3] = 0;\n        break;\n        case 'S':\n            this.map[y1][x1][2] = 0;\n            this.map[y1+1][x1][0] = 0;\n        break;\n        case 'W':\n            this.map[y1][x1][3] = 0;\n            this.map[y1][x1-1][1] = 0;\n        break;\n    }\n};\n\nMaze.prototype.generateMap = function() {\n    \n    // choose initial cell\n    var rx = Math.floor(Math.random()*this.x);\n    var ry = Math.floor(Math.random()*this.y);\n\n    this.begin = [rx, ry];\n\n    var cx = rx;\n    var cy = ry;\n    var nx;\n    var ny;\n\n    this.visited[cy][cx] = true;\n\n    var next;\n    var nextDirection;\n\n    // while there are still unvisited cells\n    while (this.unvisitedCellsExist()) {\n        if (this.chooseNeighbor(cx,cy)) {\n            \n            next = this.chooseNeighbor(cx,cy);\n            \n            nx = next[0][0];\n            ny = next[0][1];\n            \n            nextDirection = next[1];\n            this.stack.push( [nx, ny] );\n            this.removeWall(cx, cy, nextDirection);\n            this.visited[ny][nx] = true;\n\n            cx = nx;\n            cy = ny;\n        \n        } else if (this.stack.length) {\n\n            next = this.stack.pop();\n            cx = next[0];\n            cy = next[1];\n            this.turnArounds.push([cx, cy]);\n          \n        } else break;\n    }\n\n    this.end = [cx, cy];\n    this.map[0][0][3] = 0;\n    this.map[this.y-1][this.x-1][1] = 0;\n\n};\n\nMaze.prototype.getClearRect = function(cx, cy) {\n    var fx = cx * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n    var fy = cy * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n    return [fx,fy];\n};\n\nMaze.prototype.getBallCoords = function(nx, ny) {\n    var bx = nx * this.cellSize + (this.cellSize/2);\n    var by = ny * this.cellSize + (this.cellSize/2);\n    return [bx,by];\n};\n\nMaze.prototype.clearBall = function() {\n    var cl = this.getClearRect(this.currentPosition[0], this.currentPosition[1]);\n    ctx.clearRect(cl[0], cl[1], this.ballRadius*2+2, this.ballRadius*2+2);\n};\n\nMaze.prototype.drawBall = function() {\n    var ballCoords = this.getBallCoords(this.currentPosition[0], this.currentPosition[1]);\n    ctx.beginPath();\n    ctx.arc(ballCoords[0], ballCoords[1], this.ballRadius, 0, 2*Math.PI, false);\n    ctx.fillStyle = 'green';\n    ctx.fill();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#003300';\n    ctx.stroke();\n};\n\nMaze.prototype.move = function(d) {\n    var dx = d[0];\n    var dy = d[1];\n    this.clearBall();\n    this.currentPosition = [this.currentPosition[0]+dx, this.currentPosition[1]+dy];\n    this.drawBall();\n};\n\nMaze.prototype.lineIsDrawn = function(mt, lt) {\n    for (var i=0; i<this.linesDrawn.length; i++) {\n        if (this.linesDrawn[i][0][0] == mt[0] &&\n            this.linesDrawn[i][0][1] == mt[1] &&\n            this.linesDrawn[i][1][0] == lt[0] &&\n            this.linesDrawn[i][1][1] == lt[1]) {\n\n            return true;\n        }\n    }\n    return false;\n};\n\nMaze.prototype.render = function(ctx) {\n    \n    var cell;\n    var cx;\n    var cy;\n\n    ctx.moveTo(0,0);\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#666666';\n    \n    for (var i=0; i<this.y; i++) {\n        for (var j=0; j<this.x; j++) {\n            \n            ctx.beginPath();\n            cell = this.map[i][j];\n            cx = this.cellSize * j;\n            cy = this.cellSize * i;\n            var mt;\n            var lt;\n\n            if (cell[0]) {\n                mt = [cx, cy];\n                lt = [cx+this.cellSize, cy];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            } \n            if (cell[1]) {\n                mt = [cx+this.cellSize, cy];\n                lt = [cx+this.cellSize, cy+this.cellSize];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            } \n            if (cell[2]) {\n                mt = [cx+this.cellSize, cy+this.cellSize];\n                lt = [cx, cy+this.cellSize];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            }\n            if (cell[3]) {\n                mt = [cx, cy+this.cellSize];\n                lt = [cx, cy];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            }\n\n        }\n    }\n\n    this.move([0,0]);\n\n};\n\n// } end class Maze\n\n/*\n    MazeSolver pseudo-code\n\n    1. start at the entrance\n    2. while not at the exit\n        1. push the current cell to visited\n        2. if exists one or more directions that have not been visited\n            1. push the current cell to pathStack\n            2. choose any direction from those not visited\n            3. move in that direction\n            4. draw path from previous cell to chosen cell\n            5. make the chosen cell the current cell\n        3. otherwise backtrack\n            1. pop the pathStack\n            2. remove line from currentCell to popped cell\n            3. do not remove popped cell from visited\n*/\n\n// class MazeSolver {\n\nfunction MazeSolver(maze) {\n    this.Maze = maze;\n    this.position = [0, 0];\n    this.pathStack = [];\n    this.visited = [];\n    this.Maze.clearBall();\n\n    var self = this;\n    this.solveStep = function() {\n        self.moveForward();\n    };\n}\n\nMazeSolver.prototype.getValidDirections = function(x,y) {\n    \n    var directions = [];\n    \n    if (!this.Maze.map[y][x][0]) \n        directions.push([0,-1]);\n    if (!this.Maze.map[y][x][1] && (x!=this.Maze.x-1 || y!=this.Maze.y-1)) \n        directions.push([1,0]);\n    if (!this.Maze.map[y][x][2]) \n        directions.push([0,1]);\n    if (!this.Maze.map[y][x][3] && (x||y)) \n        directions.push([-1,0]);\n\n    var validDirections = [];\n    for (var i=0; i<directions.length; i++) {\n        var tx = x+directions[i][0];\n        var ty = y+directions[i][1];\n        if (!this.isVisited(tx,ty)) {\n            validDirections.push(directions[i]);\n        }\n    }\n\n    return validDirections;\n};\n\nMazeSolver.prototype.isVisited = function(x,y) {\n    for (var i=0; i<this.visited.length; i++) {\n        if (this.visited[i][0] == x && this.visited[i][1] == y) \n            return true;\n    }\n    return false;\n};\n\nMazeSolver.prototype.isDeadEnd = function(x,y) {\n    if (!this.getValidDirections(x,y).length)\n        return true;\n    return false;\n};\n\nMazeSolver.prototype.movePath = function(cx,cy,nx,ny) {\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = solutionPathColor;\n    ctx.beginPath();\n\n    ctx.moveTo(cx*this.Maze.cellSize+this.Maze.cellSize/2, \n        cy*this.Maze.cellSize+this.Maze.cellSize/2);\n    ctx.lineTo(nx*this.Maze.cellSize+this.Maze.cellSize/2, \n        ny*this.Maze.cellSize+this.Maze.cellSize/2);\n    ctx.stroke();\n};\n\nMazeSolver.prototype.clearPath = function(x,y) {\n    ctx.clearRect(x*this.Maze.cellSize+2, y*this.Maze.cellSize+2, \n        this.Maze.cellSize-4, this.Maze.cellSize-4);\n};\n\nMazeSolver.prototype.isFinished = function() {\n    if (this.position[0] == this.Maze.x-1 && this.position[1] == this.Maze.y-1)\n        return true;\n    return false;\n};\n\nMazeSolver.prototype.moveForward = function() {\n    \n    var cx = this.position[0];\n    var cy = this.position[1];\n    \n    this.visited.push([cx,cy]);\n    \n    if (this.isFinished()) {\n        console.log("FINISH");\n        clearInterval(this.interval);\n        return;\n    }\n\n    if (!this.isDeadEnd(cx,cy)) {\n        this.pathStack.push([cx,cy]);\n        var directions = this.getValidDirections(cx,cy);\n        var randomDirection = Math.floor(Math.random()*directions.length);\n        \n        var nx = cx + directions[randomDirection][0];\n        var ny = cy + directions[randomDirection][1];\n\n        this.movePath(cx,cy,nx,ny);\n        this.position = [nx,ny];\n\n    } else { \n        this.backtrack();\n    }\n};\n\nMazeSolver.prototype.backtrack = function() {\n    var lastCell = this.pathStack.pop();\n    this.clearPath(this.position[0], this.position[1]);\n    this.position = [lastCell[0], lastCell[1]];\n};\n\n// } end class MazeSolver\n\n\n\n\nfunction solveMaze() {\n    solver = new MazeSolver(Maze);\n    solver.interval = setInterval(solver.solveStep, 5);\n}\n\nvar Maze;\nvar ctx = Canvas.getContext("2d");\nvar solver;\n\nctx.fillStyle = '#ffffff'\nctx.fillRect(0,0,Canvas.width, Canvas.height)\n\n\n\nvar mx = Math.floor((Canvas.width) / cellSize);\nvar my = Math.floor((Canvas.height) / cellSize);\n\necho([Canvas.height, $(window).height(), mx, my]);\n\nMaze = new Maze(2, mx, my, cellSize);\nMaze.render(ctx);\n\n$(window).keydown(function(e) {\n            \n    var tx = Maze.currentPosition[0];\n    var ty = Maze.currentPosition[1];\n\n    switch (e.keyCode) {\n\n        case 37: // left\n            if (!Maze.map[ty][tx][3]) Maze.move([-1,0]);\n        break;\n        case 38: // up\n            if (!Maze.map[ty][tx][0]) Maze.move([0,-1]);\n        break;\n        case 39: // right\n            if (!Maze.map[ty][tx][1]) Maze.move([1,0]);\n        break;\n        case 40: // down\n            if (!Maze.map[ty][tx][2]) Maze.move([0,1]);\n        break;\n        case 83: // 's' key\n            solver = new MazeSolver(Maze);\n            solver.interval = setInterval(solver.solveStep, 5);\n        break;\n\n    }\n});	{\n    "cellSize": {"min": 5, "max": 150, "default": 30},\n    "solutionPathColor": {"default": "rgba(0,0,200,0.8)"}\n}
