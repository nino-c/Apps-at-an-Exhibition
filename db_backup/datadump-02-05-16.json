[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "authtools", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "easy_thumbnails", "model": "source"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "easy_thumbnails", "model": "thumbnail"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "easy_thumbnails", "model": "thumbnaildimensions"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "profiles", "model": "profile"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "portfolio", "model": "portfoliocategory"}}, {"model": "contenttypes.contenttype", "pk": 12, "fields": {"app_label": "portfolio", "model": "portfolioitem"}}, {"model": "contenttypes.contenttype", "pk": 13, "fields": {"app_label": "portfolio", "model": "imagegallery"}}, {"model": "contenttypes.contenttype", "pk": 14, "fields": {"app_label": "portfolio", "model": "imagemodel"}}, {"model": "contenttypes.contenttype", "pk": 15, "fields": {"app_label": "portfolio", "model": "proprietaryportfolioitem"}}, {"model": "contenttypes.contenttype", "pk": 16, "fields": {"app_label": "game", "model": "category"}}, {"model": "contenttypes.contenttype", "pk": 17, "fields": {"app_label": "game", "model": "zeroplayergame"}}, {"model": "contenttypes.contenttype", "pk": 18, "fields": {"app_label": "game", "model": "gameinstance"}}, {"model": "contenttypes.contenttype", "pk": 19, "fields": {"app_label": "game", "model": "gameinstancesnapshot"}}, {"model": "contenttypes.contenttype", "pk": 21, "fields": {"app_label": "game", "model": "imagetest"}}, {"model": "contenttypes.contenttype", "pk": 22, "fields": {"app_label": "static_precompiler", "model": "dependency"}}, {"model": "contenttypes.contenttype", "pk": 23, "fields": {"app_label": "game", "model": "jslibrary"}}, {"model": "sessions.session", "pk": "6dx7q6va4bq8gbfkr5fznk0d3zj2s2xn", "fields": {"session_data": "YTZkMGI4MDIyN2IzMWRhNmYyZGQ5OGViOWNmNDMyZTExNmQyNTBkNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImMwMmJmYzMxNDJiODMzNThkZDgyM2JmZTc4ZGMzZTkzM2QxNGUwMzUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2016-02-16T22:41:29.393Z"}}, {"model": "sessions.session", "pk": "iqmsse0hhdq50kgzszfar8fi3sgzq7y0", "fields": {"session_data": "YTZkMGI4MDIyN2IzMWRhNmYyZGQ5OGViOWNmNDMyZTExNmQyNTBkNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImMwMmJmYzMxNDJiODMzNThkZDgyM2JmZTc4ZGMzZTkzM2QxNGUwMzUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2016-02-20T00:56:20.951Z"}}, {"model": "sessions.session", "pk": "o5euotw6b22qh8jfg9lspow6daibgg46", "fields": {"session_data": "YTZkMGI4MDIyN2IzMWRhNmYyZGQ5OGViOWNmNDMyZTExNmQyNTBkNzp7Il9hdXRoX3VzZXJfaGFzaCI6ImMwMmJmYzMxNDJiODMzNThkZDgyM2JmZTc4ZGMzZTkzM2QxNGUwMzUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2016-02-13T02:49:10.471Z"}}, {"model": "easy_thumbnails.source", "pk": 1, "fields": {"storage_hash": "f9bde26a1556cd667f742bd34ec7c55e", "name": "profile_pics/2016-02-02/97.jpg", "modified": "2016-02-02T22:42:54.578Z"}}, {"model": "easy_thumbnails.thumbnail", "pk": 1, "fields": {"storage_hash": "d26becbf46ac48eda79c7a39a13a02dd", "name": "profile_pics/2016-02-02/97.jpg.30x30_q85_crop.png", "modified": "2016-02-02T22:42:54.401Z", "source": 1}}, {"model": "easy_thumbnails.thumbnail", "pk": 2, "fields": {"storage_hash": "d26becbf46ac48eda79c7a39a13a02dd", "name": "profile_pics/2016-02-02/97.jpg.140x140_q85_crop.png", "modified": "2016-02-02T22:42:54.621Z", "source": 1}}, {"model": "game.category", "pk": 1, "fields": {"name": "Mazes", "description": "sdfg", "image": ""}}, {"model": "game.category", "pk": 2, "fields": {"name": "Mathematics", "description": "sdfg", "image": ""}}, {"model": "game.jslibrary", "pk": 1, "fields": {"name": "three.js", "scriptPath": "/static/site/js/lib/three.js"}}, {"model": "game.gameinstancesnapshot", "pk": 1, "fields": {"instance": 8, "image": "./sha224_HASH_object__0x7f8acca9cf80.png", "time": 0.0, "timestamp": "2016-01-30T21:52:08.020Z"}}, {"model": "game.gameinstancesnapshot", "pk": 2, "fields": {"instance": 8, "image": "./2eaf96082c9f9b875bc30166585a51152086467bc4be52544d9e7ed1.png", "time": 0.0, "timestamp": "2016-01-30T21:59:41.650Z"}}, {"model": "game.gameinstancesnapshot", "pk": 3, "fields": {"instance": 8, "image": "./b2a5a2690abb7c14c3187957f63429a0411e13ecc0d736bee6618fdd.png", "time": 0.0, "timestamp": "2016-01-30T21:59:48.427Z"}}, {"model": "game.gameinstancesnapshot", "pk": 4, "fields": {"instance": 9, "image": "./4e369966ab087e6ae9ad7479f65bf4fe590414e89c9bfee7dc251cb1.png", "time": 0.0, "timestamp": "2016-01-31T02:25:05.346Z"}}, {"model": "game.gameinstancesnapshot", "pk": 5, "fields": {"instance": 9, "image": "./6b1f89ff824b6c1247a507ba69b8e79a1f537afc7008997b94b151dc.png", "time": 39.091, "timestamp": "2016-01-31T02:34:57.453Z"}}, {"model": "game.gameinstancesnapshot", "pk": 6, "fields": {"instance": 8, "image": "./4dc783608e36af553909f41c74dca33fad43323c6e78dedc8c6cdf44.png", "time": 58.974, "timestamp": "2016-01-31T02:37:18.781Z"}}, {"model": "game.gameinstancesnapshot", "pk": 7, "fields": {"instance": 7, "image": "./cb14d2b84a6c19aba93fe153528d13cdb0487b9f436281e485432a54.png", "time": 112.366, "timestamp": "2016-01-31T04:43:52.792Z"}}, {"model": "game.gameinstancesnapshot", "pk": 8, "fields": {"instance": 7, "image": "./b9eb24e2947ae2509ba713221cca4dce9cb67f402c5a737018b0d8f9.png", "time": 8.657, "timestamp": "2016-01-31T05:07:43.130Z"}}, {"model": "game.gameinstancesnapshot", "pk": 9, "fields": {"instance": 7, "image": "./99ffd0c2947c77af3008387e829fd7f2252804d4eda475c4a77a32db.png", "time": 1.838, "timestamp": "2016-01-31T05:29:40.865Z"}}, {"model": "game.gameinstancesnapshot", "pk": 10, "fields": {"instance": 8, "image": "./3a8131cfaf6dd7bb9cc6526e1cc2b0a418079fc8fc299c52f7193944.png", "time": 224.537, "timestamp": "2016-01-31T06:08:35.859Z"}}, {"model": "game.gameinstancesnapshot", "pk": 11, "fields": {"instance": 8, "image": "./83862f33650568379415659f9c5c621a93393f17c9e937adcae844b5.png", "time": 23.738, "timestamp": "2016-01-31T06:14:00.116Z"}}, {"model": "game.gameinstancesnapshot", "pk": 12, "fields": {"instance": 8, "image": "./95f0d382373e8114a10e756e226997398b60c5514d15f979ff3bc5b3.png", "time": 32.731, "timestamp": "2016-01-31T06:14:09.106Z"}}, {"model": "game.gameinstancesnapshot", "pk": 13, "fields": {"instance": 8, "image": "./3163a5a9c3f6d9ad9f14d6f7811881206a881b3a727b8e173868c3ed.png", "time": 34.411, "timestamp": "2016-01-31T06:14:10.759Z"}}, {"model": "game.gameinstancesnapshot", "pk": 14, "fields": {"instance": 8, "image": "./2f5f7ba9878a2c5a62d37266fc30c8c570ba02b5a0e9fba20e1d14f2.png", "time": 37.177, "timestamp": "2016-01-31T06:14:13.515Z"}}, {"model": "game.gameinstancesnapshot", "pk": 15, "fields": {"instance": 10, "image": "./64e42db9d3cc0b9d83be17afb35a8e99ebf41b4a1ded9703364856da.png", "time": 32.363, "timestamp": "2016-02-01T18:53:49.160Z"}}, {"model": "game.gameinstancesnapshot", "pk": 17, "fields": {"instance": 12, "image": "./fbd09b58694a58022e0938fa5ed7b19b18462f79f8a17922750b8940.png", "time": 8.273, "timestamp": "2016-02-02T01:53:27.823Z"}}, {"model": "game.gameinstancesnapshot", "pk": 18, "fields": {"instance": 12, "image": "./1c25cae8be78cda9a5af09232f30867d66707c2b07408682668a4a88.png", "time": 7.872, "timestamp": "2016-02-02T01:53:39.524Z"}}, {"model": "game.gameinstancesnapshot", "pk": 19, "fields": {"instance": 12, "image": "./5c4878aa13fc26ef0960a8d62de0a1c083d592eb83c647b682aecdd0.png", "time": 8.365, "timestamp": "2016-02-02T01:53:51.943Z"}}, {"model": "game.gameinstancesnapshot", "pk": 20, "fields": {"instance": 12, "image": "./ca4ca066f299db769661abb572ea9fbf40e837041b800b0397b95ae3.png", "time": 7.772, "timestamp": "2016-02-02T01:54:20.659Z"}}, {"model": "game.gameinstancesnapshot", "pk": 21, "fields": {"instance": 12, "image": "./c35d043fe308cd604a1fe48638129102855689e57ec8bad3bdf59353.png", "time": 9.23, "timestamp": "2016-02-02T01:54:45.088Z"}}, {"model": "game.gameinstancesnapshot", "pk": 22, "fields": {"instance": 14, "image": "./12fb10b8bf0b17abc8fb954d518de38fe2c1fcafe355526787f6ca5c.png", "time": 14.497, "timestamp": "2016-02-02T09:05:18.070Z"}}, {"model": "game.gameinstancesnapshot", "pk": 23, "fields": {"instance": 14, "image": "./32c43cfd4bea343bcc1b2c24be02079dba2656a71ad5ebc7261a3308.png", "time": 15.973, "timestamp": "2016-02-02T09:05:19.394Z"}}, {"model": "game.gameinstancesnapshot", "pk": 24, "fields": {"instance": 14, "image": "./4c6a426c869b38e169ad00f14343abb653062388679cb84d8fec4f85.png", "time": 52.058, "timestamp": "2016-02-02T22:35:48.287Z"}}, {"model": "game.gameinstancesnapshot", "pk": 25, "fields": {"instance": 14, "image": "./37f6e3349916cd2d33b66bd2b313dca6a169fece8ed4beace161e36e.png", "time": 70.731, "timestamp": "2016-02-02T22:36:07.050Z"}}, {"model": "game.gameinstancesnapshot", "pk": 26, "fields": {"instance": 14, "image": "./c27d6a7897ef1635cb6fa95a546301ac9ae823e1bea8f2661c54caae.png", "time": 90.992, "timestamp": "2016-02-02T22:36:27.301Z"}}, {"model": "game.gameinstancesnapshot", "pk": 27, "fields": {"instance": 14, "image": "./d5edddf598c581d35983543ba9fa6e040ba38325f5232c7531b08c3b.png", "time": 56.637, "timestamp": "2016-02-03T03:11:36.790Z"}}, {"model": "game.gameinstancesnapshot", "pk": 28, "fields": {"instance": 15, "image": "./23dd09625b5c13acfae0d5ef74b6cb60c30cbfc46fbc2316b210b867.png", "time": 82.877, "timestamp": "2016-02-03T03:13:05.542Z"}}, {"model": "game.gameinstancesnapshot", "pk": 29, "fields": {"instance": 15, "image": "./cf507f1df011fe9b2563dad9de87bfe298672ae407e2e3fc4ec59928.png", "time": 129.369, "timestamp": "2016-02-03T03:13:52.277Z"}}, {"model": "game.gameinstancesnapshot", "pk": 30, "fields": {"instance": 15, "image": "./5fd3ee31789830bdf075a7c2fe86fd6ce8ab8e5a3135b0198e2989e9.png", "time": 132.407, "timestamp": "2016-02-03T03:13:55.123Z"}}, {"model": "game.gameinstancesnapshot", "pk": 31, "fields": {"instance": 12, "image": "./d13a0e43e3514bb08092dd982500b6ad88c116aea23ed57b234966db.png", "time": 10.167, "timestamp": "2016-02-03T03:43:46.877Z"}}, {"model": "game.gameinstancesnapshot", "pk": 36, "fields": {"instance": 15, "image": "./56ecd84445998f041ed56456589f98ce3385e64d17c9a1fdc5daeee9.png", "time": 46.947, "timestamp": "2016-02-04T07:20:37.874Z"}}, {"model": "game.gameinstancesnapshot", "pk": 42, "fields": {"instance": 17, "image": "./72e16451f6c5fa040e33b3eca0b7af2dec0a6fd3727910c906282a2f.png", "time": 17.364, "timestamp": "2016-02-04T08:19:19.547Z"}}, {"model": "game.gameinstancesnapshot", "pk": 43, "fields": {"instance": 17, "image": "./800e5190edf2567b777b0519e3b889c26df434bb346d7f2ec003896f.png", "time": 21.626, "timestamp": "2016-02-04T08:19:23.737Z"}}, {"model": "game.gameinstancesnapshot", "pk": 44, "fields": {"instance": 17, "image": "./e2e1504d9d21725c49d35d3abbcb67f9e999d45a197460cc18b5adef.png", "time": 26.386, "timestamp": "2016-02-04T08:19:28.424Z"}}, {"model": "game.gameinstancesnapshot", "pk": 45, "fields": {"instance": 17, "image": "./a622ff97f68234b2c0fa453312a32aea7e39b2ea92e40e00c801edf6.png", "time": 30.525, "timestamp": "2016-02-04T08:19:32.645Z"}}, {"model": "game.gameinstancesnapshot", "pk": 46, "fields": {"instance": 17, "image": "./a53d2c1a96a63bca715d9a6c76784ce5b0bf1132d00d597767544ade.png", "time": 38.789, "timestamp": "2016-02-04T08:19:41.305Z"}}, {"model": "game.gameinstancesnapshot", "pk": 47, "fields": {"instance": 17, "image": "./adba4107e6649f0071bc628d9ba16aa9ce27647637559b766a71d52b.png", "time": 46.588, "timestamp": "2016-02-04T08:19:48.918Z"}}, {"model": "game.gameinstancesnapshot", "pk": 48, "fields": {"instance": 17, "image": "./38baa787b89c5e212f4086bcf49b7fda946d028f53875080209aa2be.png", "time": 54.869, "timestamp": "2016-02-04T08:19:57.170Z"}}, {"model": "game.gameinstancesnapshot", "pk": 49, "fields": {"instance": 17, "image": "./a382994e2b7d3fbd75ac28307dace144370cfecb9de6069ff0a3787d.png", "time": 64.319, "timestamp": "2016-02-04T08:20:06.344Z"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add permission", "content_type": 1, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change permission", "content_type": 1, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete permission", "content_type": 1, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can add group", "content_type": 2, "codename": "add_group"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can change group", "content_type": 2, "codename": "change_group"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can delete group", "content_type": 2, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can add log entry", "content_type": 3, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can change log entry", "content_type": 3, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can delete log entry", "content_type": 3, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can add content type", "content_type": 4, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can change content type", "content_type": 4, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can delete content type", "content_type": 4, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add session", "content_type": 5, "codename": "add_session"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change session", "content_type": 5, "codename": "change_session"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete session", "content_type": 5, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can add user", "content_type": 6, "codename": "add_user"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can change user", "content_type": 6, "codename": "change_user"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can delete user", "content_type": 6, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can add source", "content_type": 7, "codename": "add_source"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can change source", "content_type": 7, "codename": "change_source"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can delete source", "content_type": 7, "codename": "delete_source"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can add thumbnail", "content_type": 8, "codename": "add_thumbnail"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can change thumbnail", "content_type": 8, "codename": "change_thumbnail"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can delete thumbnail", "content_type": 8, "codename": "delete_thumbnail"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add thumbnail dimensions", "content_type": 9, "codename": "add_thumbnaildimensions"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change thumbnail dimensions", "content_type": 9, "codename": "change_thumbnaildimensions"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete thumbnail dimensions", "content_type": 9, "codename": "delete_thumbnaildimensions"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can add profile", "content_type": 10, "codename": "add_profile"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can change profile", "content_type": 10, "codename": "change_profile"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can delete profile", "content_type": 10, "codename": "delete_profile"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can add portfolio category", "content_type": 11, "codename": "add_portfoliocategory"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can change portfolio category", "content_type": 11, "codename": "change_portfoliocategory"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can delete portfolio category", "content_type": 11, "codename": "delete_portfoliocategory"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can add portfolio item", "content_type": 12, "codename": "add_portfolioitem"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can change portfolio item", "content_type": 12, "codename": "change_portfolioitem"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can delete portfolio item", "content_type": 12, "codename": "delete_portfolioitem"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add image gallery", "content_type": 13, "codename": "add_imagegallery"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change image gallery", "content_type": 13, "codename": "change_imagegallery"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete image gallery", "content_type": 13, "codename": "delete_imagegallery"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can add image model", "content_type": 14, "codename": "add_imagemodel"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can change image model", "content_type": 14, "codename": "change_imagemodel"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can delete image model", "content_type": 14, "codename": "delete_imagemodel"}}, {"model": "auth.permission", "pk": 43, "fields": {"name": "Can add proprietary portfolio item", "content_type": 15, "codename": "add_proprietaryportfolioitem"}}, {"model": "auth.permission", "pk": 44, "fields": {"name": "Can change proprietary portfolio item", "content_type": 15, "codename": "change_proprietaryportfolioitem"}}, {"model": "auth.permission", "pk": 45, "fields": {"name": "Can delete proprietary portfolio item", "content_type": 15, "codename": "delete_proprietaryportfolioitem"}}, {"model": "auth.permission", "pk": 46, "fields": {"name": "Can add category", "content_type": 16, "codename": "add_category"}}, {"model": "auth.permission", "pk": 47, "fields": {"name": "Can change category", "content_type": 16, "codename": "change_category"}}, {"model": "auth.permission", "pk": 48, "fields": {"name": "Can delete category", "content_type": 16, "codename": "delete_category"}}, {"model": "auth.permission", "pk": 49, "fields": {"name": "Can add zero player game", "content_type": 17, "codename": "add_zeroplayergame"}}, {"model": "auth.permission", "pk": 50, "fields": {"name": "Can change zero player game", "content_type": 17, "codename": "change_zeroplayergame"}}, {"model": "auth.permission", "pk": 51, "fields": {"name": "Can delete zero player game", "content_type": 17, "codename": "delete_zeroplayergame"}}, {"model": "auth.permission", "pk": 52, "fields": {"name": "Can add game instance", "content_type": 18, "codename": "add_gameinstance"}}, {"model": "auth.permission", "pk": 53, "fields": {"name": "Can change game instance", "content_type": 18, "codename": "change_gameinstance"}}, {"model": "auth.permission", "pk": 54, "fields": {"name": "Can delete game instance", "content_type": 18, "codename": "delete_gameinstance"}}, {"model": "auth.permission", "pk": 55, "fields": {"name": "Can add game instance snapshot", "content_type": 19, "codename": "add_gameinstancesnapshot"}}, {"model": "auth.permission", "pk": 56, "fields": {"name": "Can change game instance snapshot", "content_type": 19, "codename": "change_gameinstancesnapshot"}}, {"model": "auth.permission", "pk": 57, "fields": {"name": "Can delete game instance snapshot", "content_type": 19, "codename": "delete_gameinstancesnapshot"}}, {"model": "auth.permission", "pk": 61, "fields": {"name": "Can add image test", "content_type": 21, "codename": "add_imagetest"}}, {"model": "auth.permission", "pk": 62, "fields": {"name": "Can change image test", "content_type": 21, "codename": "change_imagetest"}}, {"model": "auth.permission", "pk": 63, "fields": {"name": "Can delete image test", "content_type": 21, "codename": "delete_imagetest"}}, {"model": "auth.permission", "pk": 64, "fields": {"name": "Can add dependency", "content_type": 22, "codename": "add_dependency"}}, {"model": "auth.permission", "pk": 65, "fields": {"name": "Can change dependency", "content_type": 22, "codename": "change_dependency"}}, {"model": "auth.permission", "pk": 66, "fields": {"name": "Can delete dependency", "content_type": 22, "codename": "delete_dependency"}}, {"model": "auth.permission", "pk": 67, "fields": {"name": "Can add js library", "content_type": 23, "codename": "add_jslibrary"}}, {"model": "auth.permission", "pk": 68, "fields": {"name": "Can change js library", "content_type": 23, "codename": "change_jslibrary"}}, {"model": "auth.permission", "pk": 69, "fields": {"name": "Can delete js library", "content_type": 23, "codename": "delete_jslibrary"}}, {"model": "auth.group", "pk": 1, "fields": {"name": "Level 1 user", "permissions": [52]}}, {"model": "auth.group", "pk": 2, "fields": {"name": "Level 2 user", "permissions": [46, 52, 53, 55, 57, 49, 50]}}, {"model": "authtools.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$24000$FjBYgpxyCPgp$QyiNe1HT60XGPtKcAaTDnHiLajVkkHo99/2Tit3PFhc=", "last_login": "2016-02-06T00:56:20.862Z", "is_superuser": true, "email": "nino.cocchiarella@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2016-01-28T01:45:34.234Z", "name": "Nino P. Cocchiarella", "groups": [2], "user_permissions": []}}, {"model": "profiles.profile", "pk": 1, "fields": {"slug": "5f4a81e2-0c14-435e-a4a4-b84f793fbc75", "picture": "profile_pics/2016-02-02/97.jpg", "bio": "", "email_verified": false, "followers": []}}, {"model": "game.zeroplayergame", "pk": 1, "fields": {"owner": 1, "title": "2-dimensional Maze Generator and Solver", "description": "Uses DFS algorithm to create a unique maze each instance of running. Arrow keys let user navigate through and try to solve the maze. Automatic solving -- solution button presents the one and only one correct path.", "category": 1, "created": "2016-02-04T08:49:36.389Z", "scriptName": "2d-maze-solver.js", "scriptType": "text/javascript", "source": "/*\n\nMaze Generator pseudo-code\n\n1. Make the initial cell the current cell and mark it as visited\n2. While there are unvisited cells\n    1. If the current cell has any neighbors which have not been visited\n        1. Choose randomly one of the unvisited neighbors\n        2. Push the chosen cell to the stack\n        3. Remove the wall between the current cell and the chosen cell\n        4. Make the chosen cell the current cell and mark it as visited\n    2. Otherwise\n        1. Pop a cell from the stack\n        2. Make it the current cell\n*/\n\n// class Maze {\n\nfunction Maze(dimension, x, y, cellSize) {\n    this.x = x;\n    this.y = y;\n    this.map = [];\n    this.visited = [];\n    this.stack = [];\n    this.cellSize = cellSize;\n    this.begin = [];\n    this.turnArounds = [];\n    this.currentPosition = [0, 0];\n    this.ballRadius = this.cellSize * 0.4;\n    this.linesDrawn = [];\n\n    for (var i=0; i<y; i++) {\n        this.map.push( [] );\n        this.visited.push( [] );\n        for (var j=0; j<x; j++) {\n            this.map[i].push( [1,1,1,1] );\n            this.visited[i].push( false );\n        }\n    }\n\n    this.generateMap();\n}\n\nMaze.prototype.unvisitedCellsExist = function() {\n    for (var i=0; i<this.y; i++) {\n        for (var j=0; j<this.x; j++) {\n            if (this.visited[i][j]) return true;\n        }\n    }\n    return false;\n};\n\nMaze.prototype.chooseNeighbor = function(cx,cy) {\n    var neighbors = [];\n    var directions = [];\n    if (cx > 0 && !this.visited[cy][cx-1]) \n        { neighbors.push( [cx-1, cy] ); directions.push('W'); }\n    if (cx < this.x-1 && !this.visited[cy][cx+1]) \n        { neighbors.push( [cx+1, cy] ); directions.push('E'); }\n    if (cy < this.y-1 && !this.visited[cy+1][cx]) \n        { neighbors.push( [cx, cy+1] ); directions.push('S'); }\n    if (cy > 0 && !this.visited[cy-1][cx]) \n        { neighbors.push( [cx, cy-1] ); directions.push('N'); }\n    if (neighbors.length) {\n        r = Math.floor(Math.random()*neighbors.length);\n        return [ neighbors[r], directions[r] ];\n    } else return false;\n};\n\nMaze.prototype.removeWall = function(x1, y1, direction) { \n    switch (direction) {\n        case 'N':\n            this.map[y1][x1][0] = 0;\n            this.map[y1-1][x1][2] = 0;\n        break;\n        case 'E':\n            this.map[y1][x1][1] = 0;\n            this.map[y1][x1+1][3] = 0;\n        break;\n        case 'S':\n            this.map[y1][x1][2] = 0;\n            this.map[y1+1][x1][0] = 0;\n        break;\n        case 'W':\n            this.map[y1][x1][3] = 0;\n            this.map[y1][x1-1][1] = 0;\n        break;\n    }\n};\n\nMaze.prototype.generateMap = function() {\n    \n    // choose initial cell\n    var rx = Math.floor(Math.random()*this.x);\n    var ry = Math.floor(Math.random()*this.y);\n\n    this.begin = [rx, ry];\n\n    var cx = rx;\n    var cy = ry;\n    var nx;\n    var ny;\n\n    this.visited[cy][cx] = true;\n\n    var next;\n    var nextDirection;\n\n    // while there are still unvisited cells\n    while (this.unvisitedCellsExist()) {\n        if (this.chooseNeighbor(cx,cy)) {\n            \n            next = this.chooseNeighbor(cx,cy);\n            \n            nx = next[0][0];\n            ny = next[0][1];\n            \n            nextDirection = next[1];\n            this.stack.push( [nx, ny] );\n            this.removeWall(cx, cy, nextDirection);\n            this.visited[ny][nx] = true;\n\n            cx = nx;\n            cy = ny;\n        \n        } else if (this.stack.length) {\n\n            next = this.stack.pop();\n            cx = next[0];\n            cy = next[1];\n            this.turnArounds.push([cx, cy]);\n          \n        } else break;\n    }\n\n    this.end = [cx, cy];\n    this.map[0][0][3] = 0;\n    this.map[this.y-1][this.x-1][1] = 0;\n\n};\n\nMaze.prototype.getClearRect = function(cx, cy) {\n    var fx = cx * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n    var fy = cy * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n    return [fx,fy];\n};\n\nMaze.prototype.getBallCoords = function(nx, ny) {\n    var bx = nx * this.cellSize + (this.cellSize/2);\n    var by = ny * this.cellSize + (this.cellSize/2);\n    return [bx,by];\n};\n\nMaze.prototype.clearBall = function() {\n    var cl = this.getClearRect(this.currentPosition[0], this.currentPosition[1]);\n    ctx.clearRect(cl[0], cl[1], this.ballRadius*2+2, this.ballRadius*2+2);\n};\n\nMaze.prototype.drawBall = function() {\n    var ballCoords = this.getBallCoords(this.currentPosition[0], this.currentPosition[1]);\n    ctx.beginPath();\n    ctx.arc(ballCoords[0], ballCoords[1], this.ballRadius, 0, 2*Math.PI, false);\n    ctx.fillStyle = 'green';\n    ctx.fill();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#003300';\n    ctx.stroke();\n};\n\nMaze.prototype.move = function(d) {\n    var dx = d[0];\n    var dy = d[1];\n    this.clearBall();\n    this.currentPosition = [this.currentPosition[0]+dx, this.currentPosition[1]+dy];\n    this.drawBall();\n};\n\nMaze.prototype.lineIsDrawn = function(mt, lt) {\n    for (var i=0; i<this.linesDrawn.length; i++) {\n        if (this.linesDrawn[i][0][0] == mt[0] &&\n            this.linesDrawn[i][0][1] == mt[1] &&\n            this.linesDrawn[i][1][0] == lt[0] &&\n            this.linesDrawn[i][1][1] == lt[1]) {\n\n            return true;\n        }\n    }\n    return false;\n};\n\nMaze.prototype.render = function(ctx) {\n    \n    var cell;\n    var cx;\n    var cy;\n\n    ctx.moveTo(0,0);\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#666666';\n    \n    for (var i=0; i<this.y; i++) {\n        for (var j=0; j<this.x; j++) {\n            \n            ctx.beginPath();\n            cell = this.map[i][j];\n            cx = this.cellSize * j;\n            cy = this.cellSize * i;\n            var mt;\n            var lt;\n\n            if (cell[0]) {\n                mt = [cx, cy];\n                lt = [cx+this.cellSize, cy];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            } \n            if (cell[1]) {\n                mt = [cx+this.cellSize, cy];\n                lt = [cx+this.cellSize, cy+this.cellSize];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            } \n            if (cell[2]) {\n                mt = [cx+this.cellSize, cy+this.cellSize];\n                lt = [cx, cy+this.cellSize];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            }\n            if (cell[3]) {\n                mt = [cx, cy+this.cellSize];\n                lt = [cx, cy];\n                if (!this.lineIsDrawn(mt, lt)) {\n                    this.linesDrawn.push([mt, lt]);\n                    ctx.moveTo(mt[0], mt[1]);\n                    ctx.lineTo(lt[0], lt[1]);\n                    ctx.stroke();\n                }\n            }\n\n        }\n    }\n\n    this.move([0,0]);\n\n};\n\n// } end class Maze\n\n/*\n    MazeSolver pseudo-code\n\n    1. start at the entrance\n    2. while not at the exit\n        1. push the current cell to visited\n        2. if exists one or more directions that have not been visited\n            1. push the current cell to pathStack\n            2. choose any direction from those not visited\n            3. move in that direction\n            4. draw path from previous cell to chosen cell\n            5. make the chosen cell the current cell\n        3. otherwise backtrack\n            1. pop the pathStack\n            2. remove line from currentCell to popped cell\n            3. do not remove popped cell from visited\n*/\n\n// class MazeSolver {\n\nfunction MazeSolver(maze) {\n    this.Maze = maze;\n    this.position = [0, 0];\n    this.pathStack = [];\n    this.visited = [];\n    this.Maze.clearBall();\n\n    var self = this;\n    this.solveStep = function() {\n        self.moveForward();\n    };\n}\n\nMazeSolver.prototype.getValidDirections = function(x,y) {\n    \n    var directions = [];\n    \n    if (!this.Maze.map[y][x][0]) \n        directions.push([0,-1]);\n    if (!this.Maze.map[y][x][1] && (x!=this.Maze.x-1 || y!=this.Maze.y-1)) \n        directions.push([1,0]);\n    if (!this.Maze.map[y][x][2]) \n        directions.push([0,1]);\n    if (!this.Maze.map[y][x][3] && (x||y)) \n        directions.push([-1,0]);\n\n    var validDirections = [];\n    for (var i=0; i<directions.length; i++) {\n        var tx = x+directions[i][0];\n        var ty = y+directions[i][1];\n        if (!this.isVisited(tx,ty)) {\n            validDirections.push(directions[i]);\n        }\n    }\n\n    return validDirections;\n};\n\nMazeSolver.prototype.isVisited = function(x,y) {\n    for (var i=0; i<this.visited.length; i++) {\n        if (this.visited[i][0] == x && this.visited[i][1] == y) \n            return true;\n    }\n    return false;\n};\n\nMazeSolver.prototype.isDeadEnd = function(x,y) {\n    if (!this.getValidDirections(x,y).length)\n        return true;\n    return false;\n};\n\nMazeSolver.prototype.movePath = function(cx,cy,nx,ny) {\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = solutionPathColor;\n    ctx.beginPath();\n\n    ctx.moveTo(cx*this.Maze.cellSize+this.Maze.cellSize/2, \n        cy*this.Maze.cellSize+this.Maze.cellSize/2);\n    ctx.lineTo(nx*this.Maze.cellSize+this.Maze.cellSize/2, \n        ny*this.Maze.cellSize+this.Maze.cellSize/2);\n    ctx.stroke();\n};\n\nMazeSolver.prototype.clearPath = function(x,y) {\n    ctx.clearRect(x*this.Maze.cellSize+2, y*this.Maze.cellSize+2, \n        this.Maze.cellSize-4, this.Maze.cellSize-4);\n};\n\nMazeSolver.prototype.isFinished = function() {\n    if (this.position[0] == this.Maze.x-1 && this.position[1] == this.Maze.y-1)\n        return true;\n    return false;\n};\n\nMazeSolver.prototype.moveForward = function() {\n    \n    var cx = this.position[0];\n    var cy = this.position[1];\n    \n    this.visited.push([cx,cy]);\n    \n    if (this.isFinished()) {\n        console.log(\"FINISH\");\n        clearInterval(this.interval);\n        return;\n    }\n\n    if (!this.isDeadEnd(cx,cy)) {\n        this.pathStack.push([cx,cy]);\n        var directions = this.getValidDirections(cx,cy);\n        var randomDirection = Math.floor(Math.random()*directions.length);\n        \n        var nx = cx + directions[randomDirection][0];\n        var ny = cy + directions[randomDirection][1];\n\n        this.movePath(cx,cy,nx,ny);\n        this.position = [nx,ny];\n\n    } else { \n        this.backtrack();\n    }\n};\n\nMazeSolver.prototype.backtrack = function() {\n    var lastCell = this.pathStack.pop();\n    this.clearPath(this.position[0], this.position[1]);\n    this.position = [lastCell[0], lastCell[1]];\n};\n\n// } end class MazeSolver\n\n\n\n\nfunction solveMaze() {\n    solver = new MazeSolver(Maze);\n    solver.interval = setInterval(solver.solveStep, 5);\n}\n\nvar Maze;\nvar ctx = Canvas.getContext(\"2d\");\nvar solver;\n\nctx.fillStyle = '#ffffff'\nctx.fillRect(0,0,Canvas.width, Canvas.height)\n\n\n\nvar mx = Math.floor((Canvas.width) / cellSize);\nvar my = Math.floor((Canvas.height) / cellSize);\n\necho([Canvas.height, $(window).height(), mx, my]);\n\nMaze = new Maze(2, mx, my, cellSize);\nMaze.render(ctx);\n\n$(window).keydown(function(e) {\n            \n    var tx = Maze.currentPosition[0];\n    var ty = Maze.currentPosition[1];\n\n    switch (e.keyCode) {\n\n        case 37: // left\n            if (!Maze.map[ty][tx][3]) Maze.move([-1,0]);\n        break;\n        case 38: // up\n            if (!Maze.map[ty][tx][0]) Maze.move([0,-1]);\n        break;\n        case 39: // right\n            if (!Maze.map[ty][tx][1]) Maze.move([1,0]);\n        break;\n        case 40: // down\n            if (!Maze.map[ty][tx][2]) Maze.move([0,1]);\n        break;\n        case 83: // 's' key\n            solver = new MazeSolver(Maze);\n            solver.interval = setInterval(solver.solveStep, 5);\n        break;\n\n    }\n});", "seedStructure": "{\n    \"cellSize\": {\"min\": 5, \"max\": 150, \"default\": 30},\n    \"solutionPathColor\": {\"default\": \"rgba(0,0,200,0.8)\"}\n}", "extraIncludes": []}}, {"model": "game.zeroplayergame", "pk": 2, "fields": {"owner": 1, "title": "3-dimensional \"Wolfenstein\" Maze Generator", "description": "Generates a unique random 3-dimensional maze each instance. Allows user to navigate through maze with old-fashioned \"Wolfenstein\"-style interface. Collision detection built in.", "category": 1, "created": "2016-02-04T08:16:14.056Z", "scriptName": "3d-maze-solver.js", "scriptType": "text/javascript", "source": "/*\n\n        Maze Generator pseudo-code\n\n        1. Make the initial cell the current cell and mark it as visited\n        2. While there are unvisited cells\n            1. If the current cell has any neighbors which have not been visited\n                1. Choose randomly one of the unvisited neighbors\n                2. Push the chosen cell to the stack\n                3. Remove the wall between the current cell and the chosen cell\n                4. Make the chosen cell the current cell and mark it as visited\n            2. Otherwise\n                1. Pop a cell from the stack\n                2. Make it the current cell\n        */\n\n        // class Maze {\n\n        function Maze(dimension, x, y, cellSize) {\n            this.x = x;\n            this.y = y;\n            this.map = [];\n            this.visited = [];\n            this.stack = [];\n            this.cellSize = cellSize;\n            this.begin = [];\n            this.turnArounds = [];\n            this.currentPosition = [0, 0];\n            this.ballRadius = this.cellSize * 0.4;\n            this.wallsRendered = [];\n            this.grass;\n            this.sky;\n            this.collisionPadding = 20;\n            this.playerCurrentCell = [0, 0];\n            this.atWall = false;\n            this.directionUnlocked = 0;\n            this.approachQuadrant = 0;\n\n            for (var i=0; i<y; i++) {\n                this.map.push( [] );\n                this.visited.push( [] );\n                for (var j=0; j<x; j++) {\n                    this.map[i].push( [1,1,1,1] );\n                    this.visited[i].push( false );\n                }\n            }\n\n            this.generateMap();\n        }\n\n        Maze.prototype.unvisitedCellsExist = function() {\n            for (var i=0; i<this.y; i++) {\n                for (var j=0; j<this.x; j++) {\n                    if (this.visited[i][j]) return true;\n                }\n            }\n            return false;\n        };\n\n        Maze.prototype.chooseNeighbor = function(cx,cy) {\n            var neighbors = [];\n            var directions = [];\n            if (cx > 0 && !this.visited[cy][cx-1]) \n                { neighbors.push( [cx-1, cy] ); directions.push('W'); }\n            if (cx < this.x-1 && !this.visited[cy][cx+1]) \n                { neighbors.push( [cx+1, cy] ); directions.push('E'); }\n            if (cy < this.y-1 && !this.visited[cy+1][cx]) \n                { neighbors.push( [cx, cy+1] ); directions.push('S'); }\n            if (cy > 0 && !this.visited[cy-1][cx]) \n                { neighbors.push( [cx, cy-1] ); directions.push('N'); }\n            if (neighbors.length) {\n                r = Math.floor(Math.random()*neighbors.length);\n                return [ neighbors[r], directions[r] ];\n            } else return false;\n        };\n\n        Maze.prototype.removeWall = function(x1, y1, direction) { \n            switch (direction) {\n                case 'N':\n                    this.map[y1][x1][0] = 0;\n                    this.map[y1-1][x1][2] = 0;\n                break;\n                case 'E':\n                    this.map[y1][x1][1] = 0;\n                    this.map[y1][x1+1][3] = 0;\n                break;\n                case 'S':\n                    this.map[y1][x1][2] = 0;\n                    this.map[y1+1][x1][0] = 0;\n                break;\n                case 'W':\n                    this.map[y1][x1][3] = 0;\n                    this.map[y1][x1-1][1] = 0;\n                break;\n            }\n        };\n\n        Maze.prototype.generateMap = function() {\n            \n            // choose initial cell\n            var rx = Math.floor(Math.random()*this.x);\n            var ry = Math.floor(Math.random()*this.y);\n\n            this.begin = [rx, ry];\n\n            var cx = rx;\n            var cy = ry;\n            var nx;\n            var ny;\n\n            this.visited[cy][cx] = true;\n\n            var next;\n            var nextDirection;\n\n            // while there are still unvisited cells\n            while (this.unvisitedCellsExist()) {\n                if (this.chooseNeighbor(cx,cy)) {\n                    \n                    next = this.chooseNeighbor(cx,cy);\n                    \n                    nx = next[0][0];\n                    ny = next[0][1];\n                    \n                    nextDirection = next[1];\n                    this.stack.push( [nx, ny] );\n                    this.removeWall(cx, cy, nextDirection);\n                    this.visited[ny][nx] = true;\n\n                    cx = nx;\n                    cy = ny;\n                \n                } else if (this.stack.length) {\n\n                    next = this.stack.pop();\n                    cx = next[0];\n                    cy = next[1];\n                    this.turnArounds.push([cx, cy]);\n                  \n                } else break;\n            }\n\n            this.end = [cx, cy];\n            this.map[0][0][3] = 0;\n            this.map[this.y-1][this.x-1][1] = 0;\n\n        };\n\n        Maze.prototype.getClearRect = function(cx, cy) {\n            var fx = cx * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n            var fy = cy * this.cellSize + (this.cellSize/2) - (this.ballRadius) - 1;\n            return [fx,fy];\n        };\n\n        Maze.prototype.getBallCoords = function(nx, ny) {\n            var bx = nx * this.cellSize + (this.cellSize/2);\n            var by = ny * this.cellSize + (this.cellSize/2);\n            return [bx,by];\n        };\n\n        Maze.prototype.clearBall = function() {\n            var cl = this.getClearRect(this.currentPosition[0], this.currentPosition[1]);\n            ctx.clearRect(cl[0], cl[1], this.ballRadius*2+2, this.ballRadius*2+2);\n        };\n\n        Maze.prototype.drawBall = function() {\n            var ballCoords = this.getBallCoords(this.currentPosition[0], this.currentPosition[1]);\n            ctx.beginPath();\n            ctx.arc(ballCoords[0], ballCoords[1], this.ballRadius, 0, 2*Math.PI, false);\n            ctx.fillStyle = 'green';\n            ctx.fill();\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#003300';\n            ctx.stroke();\n        };\n\n        Maze.prototype.move = function(d) {\n            var dx = d[0];\n            var dy = d[1];\n            this.clearBall();\n            this.currentPosition = [this.currentPosition[0]+dx, this.currentPosition[1]+dy];\n            this.drawBall();\n        };\n\n        Maze.prototype.wallIsRendered = function(mt, lt) {\n            for (var i=0; i<this.wallsRendered.length; i++) {\n                if (this.wallsRendered[i][0][0] == mt[0] &&\n                    this.wallsRendered[i][0][1] == mt[1] &&\n                    this.wallsRendered[i][1][0] == lt[0] &&\n                    this.wallsRendered[i][1][1] == lt[1]) {\n\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        Maze.prototype.getQuadrant = function(theta) {\n            if (theta <= (Math.PI/2)) return 1;\n            if (theta <= Math.PI) return 2;\n            if (theta <= (Math.PI*3)/2) return 3;\n            if (theta <= (Math.PI*2)) return 4;\n        }\n\n        Maze.prototype.getOppositeQuad = function(quad) {\n            if (quad == 1) return 3;\n            if (quad == 2) return 4;\n            if (quad == 3) return 1;\n            if (quad == 4) return 2;\n        }\n\n        Maze.prototype.isDirectionValid = function(direction) {\n            \n            var currentAngle = (((Math.PI*3)/2) - camera.rotation.y) % (2*Math.PI);\n            if (currentAngle < 0) currentAngle += (2*Math.PI);\n            var currentQuad = this.getQuadrant(currentAngle);\n\n            // if at a wall, handle wall vs. direction, then return false\n            if (this.atWall) {\n\n                switch (this.atWall) {\n                    case 'N':\n                        if ((currentQuad == 3 || currentQuad == 4) && direction == 1)\n                            return true;\n                        if ((currentQuad == 1 || currentQuad == 2) && direction == -1)\n                            return true;\n                        if (currentQuad == 1)\n                            camera.position.x += 10;\n                        if (currentQuad == 2)\n                            camera.position.x -= 10;\n                        return false;\n                    break;\n                    case 'E':\n                        if ((currentQuad == 2 || currentQuad == 3) && direction == 1)\n                            return true;\n                        if ((currentQuad == 1 || currentQuad == 4) && direction == -1)\n                            return true;\n                        if (currentQuad == 1)\n                            camera.position.z -= 10;\n                        if (currentQuad == 4)\n                            camera.position.z += 10;\n                        return false;\n                    break;\n                    case 'S':\n                        if ((currentQuad == 1 || currentQuad == 2) && direction == 1)\n                            return true;\n                        if ((currentQuad == 3 || currentQuad == 4) && direction == -1)\n                            return true;\n                        if (currentQuad == 3)\n                            camera.position.x -= 10;\n                        if (currentQuad == 4)\n                            camera.position.x += 10;\n                        return false;\n                    break;\n                    case 'W':\n                        if ((currentQuad == 1 || currentQuad == 4) && direction == 1)\n                            return true;\n                        if ((currentQuad == 2 || currentQuad == 3) && direction == -1)\n                            return true;\n                        if (currentQuad == 2)\n                            camera.position.z -= 10;\n                        if (currentQuad == 3)\n                            camera.position.z += 10;\n                        return false;\n                    break;\n                }\n\n                return false;\n\n            }\n\n            return true;\n\n        };\n\n        Maze.prototype.checkWallCollision = function() {\n            \n            // figure out which cell player is in\n            var playerX = Math.floor(camera.position.x / this.cellSize) + (this.x/2);\n            var playerZ = Math.floor(camera.position.z / this.cellSize) + (this.y/2);\n\n            // mark cell as current cell if not already\n            if (playerX != this.playerCurrentCell[0] || playerZ != this.playerCurrentCell[1]) {\n                this.playerCurrentCell = [playerX, playerZ];\n                console.log('entered cell ' + playerX + ', ' + playerZ);\n            }\n\n            // get walls in current cell\n            var walls = this.map[this.playerCurrentCell[1]][this.playerCurrentCell[0]];\n\n            // get global boundary coords\n            var bounds = [];\n            bounds.push((this.playerCurrentCell[1] * this.cellSize - \n                ((this.y*this.cellSize)/2)) + this.collisionPadding);\n            bounds.push((this.playerCurrentCell[0] * this.cellSize - \n                ((this.x*this.cellSize)/2)) + this.cellSize - this.collisionPadding);\n            bounds.push((this.playerCurrentCell[1] * this.cellSize - \n                ((this.y*this.cellSize)/2)) + this.cellSize - this.collisionPadding);\n            bounds.push((this.playerCurrentCell[0] * this.cellSize - \n                ((this.x*this.cellSize)/2)) + this.collisionPadding);\n\n            \n            // test each wall for collision\n            var whichWall = false;\n\n            if (walls[0] && camera.position.z <= bounds[0]) {\n                console.log('hit north wall');\n                whichWall = 'N';\n            }\n            if (walls[1] && camera.position.x >= bounds[1]) {\n                console.log('hit east wall');\n                whichWall = 'E';\n            }\n            if (walls[2] && camera.position.z >= bounds[2]) {\n                console.log('hit south wall');\n                whichWall = 'S';\n            }\n            if (walls[3] && camera.position.x <= bounds[3]) {\n                console.log('hit west wall');\n                whichWall = 'W';\n            }\n\n            this.atWall = whichWall;\n        };\n\n        Maze.prototype.render = function(ctx) {\n            \n            var cell;\n            var cx;\n            var cy;\n\n            var geometry, texture, mesh;\n\n            // draw grass\n            geometry = new THREE.BoxGeometry(this.x*this.cellSize, 10, this.y*this.cellSize);\n            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/grass.jpg');\n            texture.anisotropy = renderer.getMaxAnisotropy();\n            material = new THREE.MeshBasicMaterial( { map: texture } );\n            this.grass = new THREE.Mesh( geometry, material );\n            this.grass.position.set(0, -100, 0); \n            scene.add( this.grass );\n\n            // draw sky\n            var skyRadius;\n            if (this.y > this.x) {\n                skyRadius = (this.y*this.cellSize);\n            } else skyRadius = (this.x*this.cellSize); \n            \n            geometry = new THREE.SphereGeometry(skyRadius, 16, 16, Math.PI/2,  Math.PI*2, 0, Math.PI);\n            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/sky.jpg');\n            texture.anisotropy = renderer.getMaxAnisotropy();\n            material = new THREE.MeshBasicMaterial( {map: texture} );\n            material.side = THREE.BackSide\n            this.sky = new THREE.Mesh(geometry, material);\n            this.sky.position.set(0,0,0);\n            scene.add(this.sky);\n\n            for (var i=0; i<this.y; i++) {\n                for (var j=0; j<this.x; j++) {\n                    \n                    cell = this.map[i][j];\n                    cx = this.cellSize * j - ((this.x*this.cellSize)/2);\n                    cy = this.cellSize * i - ((this.y*this.cellSize)/2);\n                    var mt;\n                    var lt;\n\n                    if (cell[0]) {\n                        mt = [cx, cy];\n                        lt = [cx+this.cellSize, cy];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  200, 200, 10  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/wood.jpg');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0]+this.cellSize/2, 0, mt[1]); \n                            scene.add( mesh );\n                        }\n                    } \n                    if (cell[1]) {\n                        mt = [cx+this.cellSize, cy];\n                        lt = [cx+this.cellSize, cy+this.cellSize];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  10, 200, 200  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/wood.jpg');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0], 0, mt[1]+this.cellSize/2); \n                            scene.add( mesh );\n                        }\n                    } \n                    if (cell[2]) {\n                        mt = [cx+this.cellSize, cy+this.cellSize];\n                        lt = [cx, cy+this.cellSize];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  200, 200, 10  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/crate.gif');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0]-this.cellSize/2, 0, mt[1]); \n                            scene.add( mesh );\n                        }\n                    }\n                    if (cell[3]) {\n                        mt = [cx, cy+this.cellSize];\n                        lt = [cx, cy];\n                        if (!this.wallIsRendered(mt, lt)) {\n                            geometry = new THREE.BoxGeometry(  10, 200, 200  );\n                            texture = THREE.ImageUtils.loadTexture('/static/site/img/textures/crate.gif');\n                            texture.anisotropy = renderer.getMaxAnisotropy();\n                            material = new THREE.MeshBasicMaterial( { map: texture } );\n                            mesh = new THREE.Mesh( geometry, material );\n                            mesh.position.set(mt[0], 0, mt[1]-this.cellSize/2); \n                            scene.add( mesh );\n                        }\n                    }\n\n                }\n            }\n        };\n\n        Maze.prototype.walkForward = function() {\n            this.checkWallCollision();\n            if (this.isDirectionValid(1)) {\n                camera.position.x -= 10 * Math.sin(camera.rotation.y);\n                camera.position.z += 10 * Math.cos(camera.rotation.y);\n                console.log('F');\n            }\n        };\n\n        Maze.prototype.walkBackwards = function() {\n            this.checkWallCollision();\n            if (this.isDirectionValid(-1)) {\n                camera.position.x += 10 * Math.sin(camera.rotation.y);\n                camera.position.z -= 10 * Math.cos(camera.rotation.y);\n                console.log('B');\n            }\n        };\n\n        Maze.prototype.turnLeft = function() {\n            camera.rotation.y -= Math.PI / 10;\n        };\n\n        Maze.prototype.turnRight = function() {\n            camera.rotation.y += Math.PI / 10;\n        };\n\n        Maze.prototype.flyUp = function() {\n            camera.position.y += 10;\n        };\n\n        Maze.prototype.flyDown = function() {\n            camera.position.y -= 10;\n        };\n\n        // } end class Maze\n\n        /*\n            MazeSolver pseudo-code\n\n            1. start at the entrance\n            2. while not at the exit\n                1. push the current cell to visited\n                2. if exists one or more directions that have not been visited\n                    1. push the current cell to pathStack\n                    2. choose any direction from those not visited\n                    3. move in that direction\n                    4. draw path from previous cell to chosen cell\n                    5. make the chosen cell the current cell\n                3. otherwise backtrack\n                    1. pop the pathStack\n                    2. remove line from currentCell to popped cell\n                    3. do not remove popped cell from visited\n        */\n\n        // class MazeSolver {\n\n        function MazeSolver(maze) {\n            this.Maze = maze;\n            this.position = [0, 0];\n            this.pathStack = [];\n            this.visited = [];\n            this.Maze.clearBall();\n\n            var self = this;\n            this.solveStep = function() {\n                self.moveForward();\n            };\n        }\n\n        MazeSolver.prototype.getValidDirections = function(x,y) {\n            \n            var directions = [];\n            \n            if (!this.Maze.map[y][x][0]) \n                directions.push([0,-1]);\n            if (!this.Maze.map[y][x][1] && (x!=this.Maze.x-1 || y!=this.Maze.y-1)) \n                directions.push([1,0]);\n            if (!this.Maze.map[y][x][2]) \n                directions.push([0,1]);\n            if (!this.Maze.map[y][x][3] && (x||y)) \n                directions.push([-1,0]);\n\n            var validDirections = [];\n            for (var i=0; i<directions.length; i++) {\n                var tx = x+directions[i][0];\n                var ty = y+directions[i][1];\n                if (!this.isVisited(tx,ty)) {\n                    validDirections.push(directions[i]);\n                }\n            }\n\n            return validDirections;\n        };\n\n        MazeSolver.prototype.isVisited = function(x,y) {\n            for (var i=0; i<this.visited.length; i++) {\n                if (this.visited[i][0] == x && this.visited[i][1] == y) \n                    return true;\n            }\n            return false;\n        };\n\n        MazeSolver.prototype.isDeadEnd = function(x,y) {\n            if (!this.getValidDirections(x,y).length)\n                return true;\n            return false;\n        };\n\n        MazeSolver.prototype.movePath = function(cx,cy,nx,ny) {\n            ctx.lineWidth = 4;\n            ctx.strokeStyle = '#5555ff';\n            ctx.beginPath();\n\n            ctx.moveTo(cx*this.Maze.cellSize+this.Maze.cellSize/2, \n                cy*this.Maze.cellSize+this.Maze.cellSize/2);\n            ctx.lineTo(nx*this.Maze.cellSize+this.Maze.cellSize/2, \n                ny*this.Maze.cellSize+this.Maze.cellSize/2);\n            ctx.stroke();\n        };\n\n        MazeSolver.prototype.clearPath = function(x,y) {\n            ctx.clearRect(x*this.Maze.cellSize+2, y*this.Maze.cellSize+2, \n                this.Maze.cellSize-4, this.Maze.cellSize-4);\n        };\n\n        MazeSolver.prototype.isFinished = function() {\n            if (this.position[0] == this.Maze.x-1 && this.position[1] == this.Maze.y-1)\n                return true;\n            return false;\n        };\n\n        MazeSolver.prototype.moveForward = function() {\n            \n            var cx = this.position[0];\n            var cy = this.position[1];\n            \n            this.visited.push([cx,cy]);\n            \n            if (this.isFinished()) {\n                console.log(\"FINISH\");\n                clearInterval(this.interval);\n                return;\n            }\n\n            if (!this.isDeadEnd(cx,cy)) {\n                this.pathStack.push([cx,cy]);\n                var directions = this.getValidDirections(cx,cy);\n                var randomDirection = Math.floor(Math.random()*directions.length);\n                \n                var nx = cx + directions[randomDirection][0];\n                var ny = cy + directions[randomDirection][1];\n\n                this.movePath(cx,cy,nx,ny);\n                this.position = [nx,ny];\n\n            } else { \n                this.backtrack();\n            }\n        };\n\n        MazeSolver.prototype.backtrack = function() {\n            var lastCell = this.pathStack.pop();\n            this.clearPath(this.position[0], this.position[1]);\n            this.position = [lastCell[0], lastCell[1]];\n        };\n\n        // } end class MazeSolver\n\n\n        $(document).keydown(function(e) {\n            \n            var tx = Maze.currentPosition[0];\n            var ty = Maze.currentPosition[1];\n\n            switch (e.keyCode) {\n\n                case 37: // left\n                    Maze.turnLeft();\n                break;\n                case 38: // up (forward)\n                    Maze.walkForward();\n                break;\n                case 39: // right\n                    Maze.turnRight();\n                break;\n                case 40: // down (backwards)\n                    Maze.walkBackwards();\n                break;\n                case 65: // 'a' key\n                    Maze.flyUp();\n                break;\n                case 90: // 'z' key\n                    Maze.flyDown();\n                break;\n\n            }\n        });\n\n        function solveMaze() {\n            solver = new MazeSolver(Maze);\n            solver.interval = setInterval(solver.solveStep, 5);\n        }\n\n        var Maze;\n        \n\n        var ctx;\n        var solver;\n\n        var camera, scene, renderer;\n        var mesh;\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize( window.innerWidth, window.innerHeight );\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  renderer.render(scene, camera);\n}\n\n    \n    var cellSize = 200;\n\nrenderer = new THREE.WebGLRenderer({\n\tpreserveDrawingBuffer: true\n});\nrenderer.setSize( Canvas.width, Canvas.height );\necho(renderer.domElement); echo('-----');\ndocument.body.appendChild( renderer.domElement );\n\nwindow._renderer = renderer;\n\ncamera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 1, 10000 );\nscene = new THREE.Scene();\n\nMaze = new Maze(2, 16, 10, cellSize);\nMaze.render();\n\ncamera.position.x = Maze.cellSize * Maze.x * -0.5;\ncamera.position.y = 15;\ncamera.position.z = Maze.cellSize * Maze.y * -0.5 + Maze.cellSize/2;\n\ncamera.lookAt(scene.position);\nwindow.addEventListener( 'resize', onWindowResize, false );\nanimate();\n\n     \n\n        ", "seedStructure": "{}", "extraIncludes": [1]}}, {"model": "game.zeroplayergame", "pk": 4, "fields": {"owner": 1, "title": "Multivariate Polynomial Landscape", "description": "Choose coefficients of high-degree a polynomial function in 2 variables, as well as the 3x3 matrix used to project the graph of the surface onto a 2-dimensional canvas.  Many intricate and beautiful scenes emerge with certain affine transformations.  Defaults to a \"standard\" parallel projection of the z-axis (the axis \"coming out of the screen\")", "category": 2, "created": "2016-02-03T05:50:13.820Z", "scriptName": "multivariate-polynomial-landscape.js", "scriptType": "text/paperscript", "source": "DARK_GREY = new Color(0.3, 0.3, 0.3, 0.8);\nLIGHT_GREY = new Color(0.9, 0.9, 0.9, 0.2);\n\nview.viewSize = new Size(Canvas.width, Canvas.height);\n\nx_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\nx_axis.add(new Point(-view.size.width/2, 0));\nx_axis.add(new Point(view.size.width/2, 0));\nx_axis.closed = true;\n//project.activeLayer.insertChild(0,x_axis)\n\ny_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\ny_axis.add(new Point(0, -view.size.height/2));\ny_axis.add(new Point(0, view.size.height/2));\n\nx_lines = [];\n_.each(_.range(-10,10), function(n) {\n    line = new Path({strokeColor: LIGHT_GREY });\n    line.add( new Point(n, view.size.height/2) );\n    line.add( new Point(n, -view.size.height/2) );\n    line.closed = true;\n    //project.activeLayer.insertChild(0, line);\n    x_lines.push( line );\n});\n\ny_lines = [];\n_.each(_.range(-10,10), function(n) {\n    line = new Path({strokeColor: LIGHT_GREY });\n    line.add( new Point(view.size.width/2, n) );\n    line.add( new Point(-view.size.width/2, n) );\n    line.closed = true;\n    //project.activeLayer.insertChild(0, line);\n    y_lines.push( line );\n});\n\nfunction transformToCartesian(lay) {\n    lay.transform( new Matrix((view.size.width / 10),0,0,(view.size.height / -10), view.center.x, view.center.y) );\n}\n\ntransformToCartesian(project.activeLayer);\n\n\n// define formal mathematical function\nFunction = function(func, extrema) {\n    //echo(func.length);\n    this.func = func;\n    if (!extrema) { extrema = [-5,5]; }\n\n    this.domain = {\n        elements: [],\n        min: (extrema[0] || -5),\n        max: (extrema[1] || 5)\n    };\n\n    this.codomain = {\n        elements: [],\n        min: null,\n        max: null\n    };\n\n    this.mapping = null;\n}\n\nFunction.prototype = {\n    \n    compute: function(delta) {\n        if (!delta) { delta = 50; }\n        this.domain.elements = numeric.linspace(this.domain.min, this.domain.max, delta);\n        this.codomain.elements = _.map(this.domain.elements, this.func);\n        this.codomain.min = _.min(this.codomain.elements);\n        this.codomain.max = _.max(this.codomain.elements);\n        this.mapping = _.zip(this.domain.elements, this.codomain.elements);\n\n        this._w = Math.abs(this.domain.max - this.domain.min);\n        this._h = _.max(  [Math.abs(this.codomain.max),  Math.abs(this.codomain.min)]  );\n\n        this.transformation_matrix = new Matrix(\n            (view.size.width / this._w), 0,\n            0, (view.size.height / (-1*this._h)), \n            view.center.x, view.center.y);\n\n        this.computed = true;\n        echo(\"computed\")\n    },\n\n    // \"flattens\" mapping\n    // i.e. [[1,2],3] -> [1,2,3]\n    getPoints: function() {\n        if (!this.computed) { this.compute(); }\n        this.points = _.map(this.mapping, function(pair) {\n            return _.flatten(pair);\n        });\n        return this.points;\n    },\n\n\n    draw: function(path, matrix_premult, map3d, tmatrix) {\n\n        if (!this.computed) { this.compute(); }\n\n        if (map3d) {\n            this.points = this.points3d;\n        } else {\n            this.points = this.getPoints();\n        }\n\n        if (matrix_premult) {\n            this.points = _.map(this.points, function(p) {\n                return numeric.dot(matrix_premult, p);\n            })\n        }\n\n        _.each(this.points, function(p) {\n            path.add(new Point(p));\n        })\n\n        path.add(new Point(this.domain.max*2, Math.abs(this.codomain.min)*-5 + Math.abs(this.codomain.max)*-5));\n        path.add(new Point(this.domain.min*2, Math.abs(this.codomain.min)*-5 + Math.abs(this.codomain.max)*-5));\n        path.closed = true;\n\n        //path.transform(this.transformation_matrix);\n\n        //path.smooth();\n        \n        if (tmatrix) {\n            path.transform(tmatrix);\n        } else {\n            path.transform(this.transformation_matrix);\n        } \n    }\n}\n\n\nfunction CartesianProduct(A,B) {\n    prod = [];\n    _.each(A, function(a) {\n        _.each(B, function(b) {\n            prod.push([a,b]);\n        });\n    });\n    return prod;\n}\n\nBivariatePolynomialFunction = function(degree, vars, coeffs, roots) {\n\n\n    if (roots) {\n        // each set of roots must be <= degree in order\n        factorsSym = [];\n        _.each(roots[0], function(root) {\n            factorsSym.push(\"(\"+vars[0]+\"-\"+root.toString()+\")\")\n        });\n        _.each(roots[1], function(root) {\n            factorsSym.push(\"(\"+vars[1]+\"-\"+root.toString()+\")\")\n        });\n        latex = _.reduce(factorsSym, function(j,k) { return j.toString() + k.toString(); });\n\n        f = function(x,z) {\n            factors = [];\n            _.each(roots[0], function(root) {\n                factors.push( (x-root) );\n            });\n            _.each(roots[1], function(root) {\n                factors.push( (z-root) );\n            });\n            return _.reduce(factors, function(j,k) { return j*k; });\n        }\n        f.latex = \"f(\"+vars[0]+\", \"+vars[1]+\")=\" +latex.split('--').join('+');\n        return f;\n\n    } else {\n\n        // num coeffs should be 1 less than degree-th triangular number\n        term_exps = _.filter(CartesianProduct(_.range(degree+1), _.range(degree+1)),\n            function(x) {\n                return (x[0] + x[1]) <= degree && (x[0] + x[1]) != 0;\n            });\n        \n        if (!coeffs) {\n            coeffs = _.map(_.range(term_exps.length), function(i) {\n                rand = (Math.random() * degree) - (degree/2);\n                if (Math.random() > .4) return 0;\n                return Math.round(rand*3);\n            });\n        }  \n        \n        terms_sym = _.map(term_exps, function(term, i) {\n            if (coeffs[i] == 0) return \"\";\n            if (coeffs[i] == 1) {\n                coeff = \"\";\n            } else if (coeffs[i] == -1) {\n                coeff = \"-\"\n            } else coeff = coeffs[i].toString();\n            return coeff + \" \"\n                + vars[0]+\"^\"+term[0].toString() + \" \"\n                + vars[1]+\"^\"+term[1].toString();\n        });\n        terms_sym = _.filter(terms_sym, function(x) { return x != \"\"; })\n        //echo(terms_sym.join(\" + \"));\n\n        f = function(x,z) {\n            terms = _.map(term_exps, function(term, i) {\n                return coeffs[i] * Math.pow(x, term[0]) * Math.pow(z, term[1]);\n                });\n            return _.reduce(terms, function(j,k) { return j+k; });\n        }\n        f.latex = terms_sym.join(\"+\").split(\"+-\").join(\"-\").split(\"+\").join(\" + \");\n        f.latex = f.latex.split(\"^1\").join(\"\");\n        f.latex = \"f(\"+vars[0]+\", \"+vars[1]+\")=\" + f.latex.split(/[a-z]\\^0/).join(\"\");\n        return f;\n    }\n\n}\n\n\n\n// choose a polynomial\n//Polynomial = new BivariatePolynomialFunction(3, ['x','y'], [1,-1,0,0,0,0,-2,3,1]);\nPolynomial = new BivariatePolynomialFunction(5, ['x','y']);//, null, [[2,3,0,-7,0],[1,-2, -4, -13]]);\n\n\nslices = [];\nzrange = [-15,0];\nxrange = [-9, 9];\nzspace = numeric.linspace(zrange[0], zrange[1], 50);\n\nF0 = function(x) { return Polynomial(x,0); }\nslice0 = new Function(F0, [xrange[0],xrange[1]]);\nslice0.compute();\nglobal_matrix = slice0.transformation_matrix;\n\nCartesianMatrix = new Matrix(1,0,0,-1, view.center.x, view.center.y);\n\n// begin drawing process\nGraphLayer = new Layer({\n     blendMode: \"multiply\",\n});\n//GraphLayer.globalMatrix = CartesianMatrix;\n//GraphLayer.transform(CartesianMatrix);\n\necho(\"global matrix\"); echo(global_matrix);\n\nfunction_shown = false;\nzindex=0\n\nview.onFrame = function(event) {\n\t\n    if (zindex < zspace.length) {\n        \n        //prevLayer = project.activeLayer;\n        l = new Layer({\n            //blendMode: \"multiply\"\n        });\n\n        z = zspace[zindex];\n        //echo(z)\n    \n\n        F = function(x) { return Polynomial(x,z); }\n        slice = new Function(F, [xrange[0],xrange[1]]);\n\n        points3d = slice.getPoints();\n        _.each(_.range(points3d.length), function(i) { points3d[i].push(z); });\n\n        slice.points3d = points3d\n\n        transformation = [\n            [1, 0, 0], //5*Math.cos(Math.PI/-4)],\n            [0, 1, 0] //5*Math.sin(Math.PI/-4)],\n        ];\n\n        path1 = new Path({\n            strokeColor: new Color(0.3, 0.3, 0.3, 0.5),\n            strokeWidth: 1,\n            closed: true,\n            fillColor: new Color(Math.random(),1,Math.random(),0.2),\n        });\n\n        slice.draw(path1, transformation, true, global_matrix);\n        //path.transform(CartesianMatrix)\n\n        // transformation2 = new Matrix(\n        //     1-(z/50), 0, 0, 1-(z/50), 0, 0 //5*Math.sin(Math.PI/-4)],\n        // );\n\n        transformation2 = new Matrix(\n            1, 0, 0, 1, 0, 0 //5*Math.sin(Math.PI/-4)],\n        );\n\n        //path1.transform(transformation2);\n        path1.scale(1-(z/50), 1-(z/50), view.center)\n        path1.translate(new Point(-10*z, 30*z))\n        \n        project.activeLayer.insertChild(0,path1);\n\n        slices.push({layer: project.activeLayer,\n            func: slice,\n            transformation: transformation,\n            path: path1});\n\n        //echo(path.position)\n        \n        if (zindex == zspace.length-1) { \n            //echo(slices);\n            //view.pause();\n        }\n        zindex++;\n\n        if (!function_shown) {\n            if (display = document.getElementById(\"function-katex\")) {\n                //katex.render(Polynomial.latex, display);\n                tokens = Polynomial.latex.split(\" \");\n                line_length = Math.ceil(tokens.length/2);\n                line2 = tokens.splice(-1*line_length).join(\" \");\n                line1 = tokens.join(\" \");\n                $(\"#function-katex\").text(\n                    \"$$\" + line1 + \"$$\\n$$\\\\space \\\\space \\\\space \\\\space \" + line2 + \"$$ \\n\"\n                     + \"$$\\\\left(\\\\begin{array}{rrr}\\n1 & 0 & \\\\frac{1}{2} \\\\, \\\\sqrt{2} \\\\\\\\\\n0 & 1 & \\\\frac{1}{2} \\\\, \\\\sqrt{2}\\\\\\\\\\n \\\\end{array}\\\\right)$$\");\n                function_shown = true;\n            }\n        }\n    }\n    \n}\n\n\n\n////////////\n\n\nfunction onResize(event) {\n\n}", "seedStructure": "{\n  \"x1\": {\"default\": 5}\n}", "extraIncludes": []}}, {"model": "game.zeroplayergame", "pk": 5, "fields": {"owner": 1, "title": "Function in 1 variable with time parameter", "description": "Sets of graphs of a function in 1 variable with time as a parameter.  (Technically a function in 2 variables)", "category": 2, "created": "2016-02-03T03:11:30.899Z", "scriptName": "function-1-var-1-param.js", "scriptType": "text/paperscript", "source": "/*\n    *\n    *   @author: nino p cocchiarella\n    *   (c) 2016\n    *\n*/\n\nview.viewSize = new Size(Canvas.width, Canvas.height);\n\n// define formal mathematical function in 1 var\nMFunction = function(func, extrema) {\n   \n    this.func = func;\n    if (!extrema) { extrema = [-5,5]; }\n\n    this.domain = {\n        elements: [],\n        min: (extrema[0] || -5),\n        max: (extrema[1] || 5)\n    };\n\n    this.codomain = {\n        elements: [],\n        min: null,\n        max: null\n    };\n\n    this.mapping = null;\n    this.compute();\n}\n\nMFunction.prototype = {\n    \n    compute: function(delta) {\n        if (!delta) { delta = 100; }\n\n        eval(\"_func = function(x) { return \"+this.func+\"; };\");\n\n        this.domain.elements = numeric.linspace(this.domain.min, this.domain.max, delta);\n        this.codomain.elements = _.map(this.domain.elements, _func);\n        this.codomain.min = _.min(this.codomain.elements);\n        this.codomain.max = _.max(this.codomain.elements);\n        this.mapping = _.zip(this.domain.elements, this.codomain.elements);\n    },\n\n    draw: function(path, matrix_premult) {\n        if (this.mapping == null) { this.compute(); }\n        \n        _w = Math.abs(this.domain.max - this.domain.min);\n        _h = _.max(  [Math.abs(this.codomain.max),  Math.abs(this.codomain.min)]  );\n    \n\n        points = this.mapping;\n\n        if (matrix_premult) {\n            points = _.map(points, function(p) {\n                return numeric.dot(matrix_premult, p);\n            })\n        }\n\n        _.each(points, function(p) {\n            path.add(new Point(p));\n        });\n        \n        T = new Matrix(\n            (view.size.width / _w), 0,\n            0, (view.size.height / (-1*_h)), \n            view.center.x, view.center.y);\n\n        project.activeLayer.transform(T); \n    }\n}\n\n\nfunc = new MFunction(funct, [xMin,xMax]);\n\n// draw Cartesian axes\ndrawAxes = function(xmax, ymax) {\n\n    if (xmax == undefined) xmax = 10;\n    if (ymax == undefined) ymax = 10;\n\n    DARK_GREY = new Color(0.3, 0.3, 0.3, 0.8);\n    LIGHT_GREY = new Color(0.9, 0.9, 0.9, 0.2);\n\n    x_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\n    x_axis.add(new Point(-view.size.width/2, 0));\n    x_axis.add(new Point(view.size.width/2, 0));\n\n    y_axis = new Path({ strokeColor: DARK_GREY, strokeWidth: 0.3, strokeScaling: false });\n    y_axis.add(new Point(0, -view.size.height/2));\n    y_axis.add(new Point(0, view.size.height/2));\n\n    _.each(_.range(-1*xmax,xmax), function(n) {\n        var line = new Path({strokeColor: LIGHT_GREY });\n        line.add( new Point(n, view.size.height/2) );\n        line.add( new Point(n, -view.size.height/2) );\n        line.closed = true;\n    });\n\n\n    _.each(_.range(-1*ymax,ymax), function(n) {\n        var line = new Path({strokeColor: LIGHT_GREY });\n        line.add( new Point(view.size.width/2, n) );\n        line.add( new Point(-view.size.width/2, n) );\n        line.closed = true;\n    });\n\n\n    project.activeLayer.transform( new Matrix((view.size.width / xmax),0,0,(view.size.height / (-1*ymax)), view.center.x, view.center.y) );\n\n}\n//executeRemotePaperscript(\"/static/site/js/app/graph-util.js\");\ndrawAxes();\n\n////////////////////////\n\nINITCOLOR = _.map(_.range(3), Math.random)\nN = 15;\n\n\ngraphs = [];\n\n_.map(_.range(N), function(n) {\n\n    layer = new Layer({\n        backgroundColor: new Color(1,1,1,0)\n    });\n\n    thickness = (n == 0 ? 3 : 1)\n    alpha = 0.5 - (n/(N*2))\n\n    var graph = new Path({\n        strokeColor: new Color(  INITCOLOR.concat([alpha]) ),\n        strokeWidth: thickness\n    });\n\n    matrix = [[1,0],[0,(1-(n/N))]]\n    func.draw(graph, matrix);\n    graph.smooth();\n    graphs.push(graph);\n\n });\n\n\n\n\n////////////\n\n\nfunction onResize(event) {\n\n}\n\nview.onFrame = function(event) {\n    scale = 1 + (Math.sin(event.time)/ breathDelta)\n    _.each(graphs, function(g) {\n        g.scale(1, scale);\n    });\n}", "seedStructure": "{\n    \"breathDelta\": {\"default\":17, \"min\":1.1, \"max\":1000},\n    \"funct\": {\"default\": \"x*Math.cos(x)\"},\n    \"xMin\": {\"default\": -5},\n    \"xMax\": {\"default\": 5}\n}", "extraIncludes": []}}, {"model": "game.gameinstance", "pk": 7, "fields": {"game": 1, "instantiator": 1, "timestamp": "2016-01-30T00:38:35.237Z", "seed": "{\"cellSize\": 25, \"solutionPathColor\": \"rgba(200,0,0,0.8)\"}", "pagecache": ""}}, {"model": "game.gameinstance", "pk": 8, "fields": {"game": 1, "instantiator": 1, "timestamp": "2016-01-30T02:15:43.902Z", "seed": "{\"cellSize\": 10, \"solutionPathColor\": \"rgba(0,200,0,0.8)\"}", "pagecache": ""}}, {"model": "game.gameinstance", "pk": 9, "fields": {"game": 1, "instantiator": 1, "timestamp": "2016-01-30T02:15:56.101Z", "seed": "{\"cellSize\": 40, \"solutionPathColor\": \"rgba(0,0,200,0.8)\"}", "pagecache": ""}}, {"model": "game.gameinstance", "pk": 10, "fields": {"game": 1, "instantiator": 1, "timestamp": "2016-02-01T18:48:35.669Z", "seed": "{\"solutionPathColor\": \"rgba(0,0,200,0.8)\", \"cellSize\": 30}", "pagecache": null}}, {"model": "game.gameinstance", "pk": 11, "fields": {"game": 1, "instantiator": 1, "timestamp": "2016-02-01T23:53:05.514Z", "seed": "{\"solutionPathColor\": \"rgba(0,0,200,0.8)\", \"cellSize\": 30}", "pagecache": null}}, {"model": "game.gameinstance", "pk": 12, "fields": {"game": 4, "instantiator": 1, "timestamp": "2016-02-02T00:05:36.312Z", "seed": "{\"x1\": 5}", "pagecache": null}}, {"model": "game.gameinstance", "pk": 14, "fields": {"game": 5, "instantiator": 1, "timestamp": "2016-02-02T09:04:54.948Z", "seed": "{\"xMin\": -5, \"breathDelta\": 17, \"xMax\": 5, \"funct\": \"x*Math.cos(x)\"}", "pagecache": null}}, {"model": "game.gameinstance", "pk": 15, "fields": {"game": 5, "instantiator": 1, "timestamp": "2016-02-02T22:39:31.169Z", "seed": "{\"xMin\": -5, \"breathDelta\": 17, \"xMax\": 5, \"funct\": \"x*Math.cos(x)\"}", "pagecache": null}}, {"model": "game.gameinstance", "pk": 17, "fields": {"game": 2, "instantiator": 1, "timestamp": "2016-02-04T07:15:16.001Z", "seed": "{}", "pagecache": null}}, {"model": "game.gameinstance", "pk": 18, "fields": {"game": 5, "instantiator": 1, "timestamp": "2016-02-05T09:07:54.920Z", "seed": "{\"xMin\": -5, \"breathDelta\": 17, \"xMax\": 5, \"funct\": \"x*Math.cos(x)\"}", "pagecache": null}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2016-01-28T01:47:27.700Z", "user": 1, "content_type": 16, "object_id": "1", "object_repr": "Mazes", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2016-01-28T01:48:40.369Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2016-01-28T01:58:16.621Z", "user": 1, "content_type": 17, "object_id": "2", "object_repr": "\"3-dimensional \"Wolfenstein\" Maze Generator\", by Nino P. Cocchiarella", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2016-01-29T03:00:46.805Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seedStruct and source."}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2016-01-29T04:05:20.435Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seedStruct. Added game param \"GameParam object\"."}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2016-01-29T20:07:55.189Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seedStructure."}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2016-01-29T20:14:32.594Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2016-01-29T21:07:03.238Z", "user": 1, "content_type": 18, "object_id": "2", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2016-01-29T23:18:25.040Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2016-01-29T23:47:14.663Z", "user": 1, "content_type": 16, "object_id": "2", "object_repr": "Mathematics", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2016-01-29T23:48:06.502Z", "user": 1, "content_type": 17, "object_id": "3", "object_repr": "\"Test\", by Nino P. Cocchiarella", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2016-01-29T23:57:16.277Z", "user": 1, "content_type": 17, "object_id": "3", "object_repr": "\"Test\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2016-01-29T23:58:04.816Z", "user": 1, "content_type": 18, "object_id": "4", "object_repr": "Nino P. Cocchiarella's instance of \"Test\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2016-01-29T23:58:04.835Z", "user": 1, "content_type": 18, "object_id": "3", "object_repr": "Nino P. Cocchiarella's instance of \"Test\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2016-01-30T00:28:59.530Z", "user": 1, "content_type": 18, "object_id": "5", "object_repr": "Nino P. Cocchiarella's instance of \"Test\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2016-01-30T00:31:04.167Z", "user": 1, "content_type": 18, "object_id": "1", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2016-01-30T00:33:33.901Z", "user": 1, "content_type": 18, "object_id": "6", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seed and source."}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2016-01-30T00:36:03.062Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2016-01-30T00:36:20.307Z", "user": 1, "content_type": 18, "object_id": "6", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2016-01-30T00:36:20.395Z", "user": 1, "content_type": 18, "object_id": "1", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2016-01-30T02:19:37.751Z", "user": 1, "content_type": 18, "object_id": "9", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seed."}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2016-01-30T02:19:48.186Z", "user": 1, "content_type": 18, "object_id": "8", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seed."}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2016-01-30T02:50:16.867Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional interactive Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed description."}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2016-01-30T02:51:07.990Z", "user": 1, "content_type": 17, "object_id": "2", "object_repr": "\"3-dimensional \"Wolfenstein\" Maze Generator\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed description."}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2016-01-30T04:29:37.152Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed title."}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2016-01-30T06:36:56.549Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2016-01-30T21:21:45.864Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2016-01-30T21:22:40.981Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2016-01-30T21:35:43.560Z", "user": 1, "content_type": 21, "object_id": "8", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2016-01-30T21:35:43.615Z", "user": 1, "content_type": 21, "object_id": "7", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2016-01-30T21:35:43.648Z", "user": 1, "content_type": 21, "object_id": "6", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2016-01-30T21:35:43.659Z", "user": 1, "content_type": 21, "object_id": "5", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2016-01-30T21:35:43.670Z", "user": 1, "content_type": 21, "object_id": "4", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2016-01-30T21:35:43.681Z", "user": 1, "content_type": 21, "object_id": "3", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2016-01-30T21:35:43.692Z", "user": 1, "content_type": 21, "object_id": "2", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2016-01-30T21:35:43.703Z", "user": 1, "content_type": 21, "object_id": "1", "object_repr": "ImageTest object", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2016-01-31T02:27:33.221Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2016-01-31T02:28:27.249Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2016-01-31T02:29:57.247Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2016-01-31T02:32:24.066Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2016-01-31T02:33:58.285Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2016-01-31T03:43:04.323Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2016-01-31T03:43:53.968Z", "user": 1, "content_type": 18, "object_id": "9", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seed."}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2016-01-31T03:44:14.159Z", "user": 1, "content_type": 18, "object_id": "8", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seed."}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2016-01-31T03:44:38.722Z", "user": 1, "content_type": 18, "object_id": "7", "object_repr": "Nino P. Cocchiarella's instance of \"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seed."}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2016-01-31T03:52:53.443Z", "user": 1, "content_type": 17, "object_id": "1", "object_repr": "\"2-dimensional Maze Generator and Solver\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seedStructure."}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2016-02-01T19:35:18.265Z", "user": 1, "content_type": 2, "object_id": "1", "object_repr": "Level 1 user", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2016-02-01T19:36:25.121Z", "user": 1, "content_type": 2, "object_id": "2", "object_repr": "Level 2 user", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2016-02-01T19:36:33.751Z", "user": 1, "content_type": 6, "object_id": "1", "object_repr": "Nino P. Cocchiarella <nino.cocchiarella@gmail.com>", "action_flag": 2, "change_message": "Changed groups."}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2016-02-02T00:00:48.075Z", "user": 1, "content_type": 17, "object_id": "4", "object_repr": "\"Multivariate Polynomial Landscape\", by Nino P. Cocchiarella", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2016-02-02T00:03:48.883Z", "user": 1, "content_type": 17, "object_id": "4", "object_repr": "\"Multivariate Polynomial Landscape\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "No fields changed."}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2016-02-02T00:04:39.421Z", "user": 1, "content_type": 17, "object_id": "4", "object_repr": "\"Multivariate Polynomial Landscape\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seedStructure."}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2016-02-02T00:05:29.865Z", "user": 1, "content_type": 17, "object_id": "4", "object_repr": "\"Multivariate Polynomial Landscape\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seedStructure."}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2016-02-02T00:36:32.529Z", "user": 1, "content_type": 17, "object_id": "4", "object_repr": "\"Multivariate Polynomial Landscape\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2016-02-02T01:48:13.770Z", "user": 1, "content_type": 17, "object_id": "5", "object_repr": "\"Function in 1 variable with time parameter\", by Nino P. Cocchiarella", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2016-02-02T09:01:18.529Z", "user": 1, "content_type": 18, "object_id": "13", "object_repr": "Nino P. Cocchiarella's instance of \"Function in 1 variable with time parameter\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2016-02-02T09:01:18.577Z", "user": 1, "content_type": 18, "object_id": "5", "object_repr": "Nino P. Cocchiarella's instance of \"Test\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2016-02-02T09:04:01.144Z", "user": 1, "content_type": 17, "object_id": "5", "object_repr": "\"Function in 1 variable with time parameter\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source and seedStructure."}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2016-02-02T09:04:46.661Z", "user": 1, "content_type": 17, "object_id": "5", "object_repr": "\"Function in 1 variable with time parameter\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed seedStructure."}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2016-02-04T07:10:40.868Z", "user": 1, "content_type": 17, "object_id": "3", "object_repr": "\"Test\", by Nino P. Cocchiarella", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2016-02-04T07:11:58.972Z", "user": 1, "content_type": 17, "object_id": "2", "object_repr": "\"3-dimensional \"Wolfenstein\" Maze Generator\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source and seedStructure."}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2016-02-04T07:29:18.436Z", "user": 1, "content_type": 23, "object_id": "1", "object_repr": "JSLibrary object", "action_flag": 1, "change_message": "Added."}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2016-02-04T07:30:35.554Z", "user": 1, "content_type": 17, "object_id": "2", "object_repr": "\"3-dimensional \"Wolfenstein\" Maze Generator\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source and extraIncludes."}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2016-02-04T07:44:49.520Z", "user": 1, "content_type": 17, "object_id": "2", "object_repr": "\"3-dimensional \"Wolfenstein\" Maze Generator\", by Nino P. Cocchiarella", "action_flag": 2, "change_message": "Changed source."}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2016-02-04T08:18:50.923Z", "user": 1, "content_type": 19, "object_id": "41", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 08:16:33.344232+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2016-02-04T08:18:50.934Z", "user": 1, "content_type": 19, "object_id": "40", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 08:12:21.762028+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2016-02-04T08:18:50.944Z", "user": 1, "content_type": 19, "object_id": "39", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 08:11:40.674877+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2016-02-04T08:18:50.955Z", "user": 1, "content_type": 19, "object_id": "38", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 07:45:07.952702+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 69, "fields": {"action_time": "2016-02-04T08:18:50.966Z", "user": 1, "content_type": 19, "object_id": "37", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 07:21:36.492645+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 70, "fields": {"action_time": "2016-02-04T08:18:50.977Z", "user": 1, "content_type": 19, "object_id": "35", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 07:18:07.345077+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 71, "fields": {"action_time": "2016-02-04T08:18:50.988Z", "user": 1, "content_type": 19, "object_id": "34", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 07:18:02.663271+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 72, "fields": {"action_time": "2016-02-04T08:18:50.999Z", "user": 1, "content_type": 19, "object_id": "33", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 07:17:57.341122+00:00", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 73, "fields": {"action_time": "2016-02-04T08:18:51.010Z", "user": 1, "content_type": 19, "object_id": "32", "object_repr": "3-dimensional \"Wolfenstein\" Maze Generator, 2016-02-04 07:17:53.179290+00:00", "action_flag": 3, "change_message": ""}}]